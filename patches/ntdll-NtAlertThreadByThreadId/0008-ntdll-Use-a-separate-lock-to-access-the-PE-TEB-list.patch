From a9f438755a74e85cfb3b9dd122058c722ffa2f3c Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Wed, 28 Oct 2020 17:31:00 -0500
Subject: [PATCH 08/13] ntdll: Use a separate lock to access the PE TEB list.

Signed-off-by: Zebediah Figura <z.figura12@gmail.com>
---
 dlls/ntdll/loader.c | 70 +++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 64 insertions(+), 6 deletions(-)

diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index 45ad496fd64..26443a8c4f4 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -127,7 +127,6 @@ typedef struct _wine_modref
 
 static UINT tls_module_count;      /* number of modules with TLS directory */
 static IMAGE_TLS_DIRECTORY *tls_dirs;  /* array of TLS directories */
-LIST_ENTRY tls_links = { &tls_links, &tls_links };
 
 static RTL_CRITICAL_SECTION loader_section;
 static RTL_CRITICAL_SECTION_DEBUG critsect_debug =
@@ -184,6 +183,55 @@ static inline BOOL contains_path( LPCWSTR name )
     return ((*name && (name[1] == ':')) || wcschr(name, '/') || wcschr(name, '\\'));
 }
 
+/* We need to access this lock from inside the implementation of (process-local)
+ * synchronization functions, which makes actually scheduling more than a little
+ * difficult.
+ *
+ * On the other hand, we want to make this a read/write lock, not just to avoid
+ * lock contention, but also because lock contention is particularly expensive
+ * for a spinlock.
+ */
+LIST_ENTRY tls_links = { &tls_links, &tls_links };
+static LONG teb_spinlock;
+
+#define TEB_SPINLOCK_WRITE (-1)
+
+static inline void small_pause(void)
+{
+#ifdef __i386__
+    __asm__ __volatile__( "rep;nop" : : : "memory" );
+#else
+    __asm__ __volatile__( "" : : : "memory" );
+#endif
+}
+
+static void teb_list_rdlock(void)
+{
+    for (;;)
+    {
+        LONG old = teb_spinlock;
+        if (old != TEB_SPINLOCK_WRITE && InterlockedCompareExchange( &teb_spinlock, old + 1, old ) == old)
+            return;
+        small_pause();
+    }
+}
+
+static void teb_list_rdunlock(void)
+{
+    InterlockedDecrement( &teb_spinlock );
+}
+
+static void teb_list_wrlock(void)
+{
+    while (InterlockedCompareExchange( &teb_spinlock, TEB_SPINLOCK_WRITE, 0 ))
+        small_pause();
+}
+
+static void teb_list_wrunlock(void)
+{
+    InterlockedExchange( &teb_spinlock, 0 );
+}
+
 #define RTL_UNLOAD_EVENT_TRACE_NUMBER 64
 
 typedef struct _RTL_UNLOAD_EVENT_TRACE
@@ -991,13 +1039,18 @@ static SHORT alloc_tls_slot( LDR_DATA_TABLE_ENTRY *mod )
         if (!new_ptr) return -1;
 
         /* resize the pointer block in all running threads */
+        teb_list_rdlock();
         for (entry = tls_links.Flink; entry != &tls_links; entry = entry->Flink)
         {
             TEB *teb = CONTAINING_RECORD( entry, TEB, TlsLinks );
             void **old = teb->ThreadLocalStoragePointer;
             void **new = RtlAllocateHeap( GetProcessHeap(), HEAP_ZERO_MEMORY, new_count * sizeof(*new));
 
-            if (!new) return -1;
+            if (!new)
+            {
+                teb_list_rdunlock();
+                return -1;
+            }
             if (old) memcpy( new, old, tls_module_count * sizeof(*new) );
             teb->ThreadLocalStoragePointer = new;
 #ifdef __x86_64__  /* macOS-specific hack */
@@ -1006,12 +1059,14 @@ static SHORT alloc_tls_slot( LDR_DATA_TABLE_ENTRY *mod )
             TRACE( "thread %04lx tls block %p -> %p\n", (ULONG_PTR)teb->ClientId.UniqueThread, old, new );
             /* FIXME: can't free old block here, should be freed at thread exit */
         }
+        teb_list_rdunlock();
 
         tls_dirs = new_ptr;
         tls_module_count = new_count;
     }
 
     /* allocate the data block in all running threads */
+    teb_list_rdlock();
     for (entry = tls_links.Flink; entry != &tls_links; entry = entry->Flink)
     {
         TEB *teb = CONTAINING_RECORD( entry, TEB, TlsLinks );
@@ -1026,6 +1081,7 @@ static SHORT alloc_tls_slot( LDR_DATA_TABLE_ENTRY *mod )
         RtlFreeHeap( GetProcessHeap(), 0,
                      InterlockedExchangePointer( (void **)teb->ThreadLocalStoragePointer + i, new_ptr ));
     }
+    teb_list_rdunlock();
 
     *(DWORD *)dir->AddressOfIndex = i;
     tls_dirs[i] = *dir;
@@ -3243,7 +3299,9 @@ void WINAPI LdrShutdownThread(void)
     if (wm->ldr.TlsIndex != -1) call_tls_callbacks( wm->ldr.DllBase, DLL_THREAD_DETACH );
 
     RtlAcquirePebLock();
+    teb_list_wrlock();
     RemoveEntryList( &NtCurrentTeb()->TlsLinks );
+    teb_list_wrunlock();
     if ((pointers = NtCurrentTeb()->ThreadLocalStoragePointer))
     {
         for (i = 0; i < tls_module_count; i++) RtlFreeHeap( GetProcessHeap(), 0, pointers[i] );
@@ -3480,6 +3538,10 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, ULONG_PTR unknown2, ULONG_PTR
 
     if (process_detaching) NtTerminateThread( GetCurrentThread(), 0 );
 
+    teb_list_wrlock();
+    InsertHeadList( &tls_links, &NtCurrentTeb()->TlsLinks );
+    teb_list_wrunlock();
+
     RtlEnterCriticalSection( &loader_section );
 
     wm = get_modref( NtCurrentTeb()->Peb->ImageBaseAddress );
@@ -3502,10 +3564,6 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, ULONG_PTR unknown2, ULONG_PTR
         imports_fixup_done = TRUE;
     }
 
-    RtlAcquirePebLock();
-    InsertHeadList( &tls_links, &NtCurrentTeb()->TlsLinks );
-    RtlReleasePebLock();
-
     NtCurrentTeb()->FlsSlots = fls_alloc_data();
 
     if (!attach_done)  /* first time around */
-- 
2.29.2

