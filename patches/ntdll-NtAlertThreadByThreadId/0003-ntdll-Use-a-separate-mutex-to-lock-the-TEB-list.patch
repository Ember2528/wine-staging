From 0fdd0e4d59af06ed8b225e87802001ab53cb4906 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Mon, 31 Aug 2020 22:56:03 -0500
Subject: [PATCH 03/13] ntdll: Use a separate mutex to lock the TEB list.

Signed-off-by: Zebediah Figura <z.figura12@gmail.com>
---
 dlls/ntdll/unix/virtual.c | 14 +++++++++-----
 1 file changed, 9 insertions(+), 5 deletions(-)

diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 785583a340a..2e5e94f80f8 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -163,6 +163,7 @@ static void *teb_block;
 static void **next_free_teb;
 static int teb_block_pos;
 static struct list teb_list = LIST_INIT( teb_list );
+static pthread_rwlock_t teb_list_lock = PTHREAD_RWLOCK_INITIALIZER;
 
 #define ROUND_ADDR(addr,mask) ((void *)((UINT_PTR)(addr) & ~(UINT_PTR)(mask)))
 #define ROUND_SIZE(addr,size) (((SIZE_T)(size) + ((UINT_PTR)(addr) & page_mask) + page_mask) & ~page_mask)
@@ -2556,7 +2557,9 @@ static void init_teb( TEB *teb, PEB *peb )
     thread_data->reply_fd   = -1;
     thread_data->wait_fd[0] = -1;
     thread_data->wait_fd[1] = -1;
+    pthread_rwlock_wrlock( &teb_list_lock );
     list_add_head( &teb_list, &thread_data->entry );
+    pthread_rwlock_unlock( &teb_list_lock );
 }
 
 
@@ -2678,7 +2681,9 @@ void virtual_free_teb( TEB *teb )
     }
 
     server_enter_uninterrupted_section( &virtual_mutex, &sigset );
+    pthread_rwlock_wrlock( &teb_list_lock );
     list_remove( &thread_data->entry );
+    pthread_rwlock_unlock( &teb_list_lock );
     ptr = (char *)teb - teb_offset;
     *(void **)ptr = next_free_teb;
     next_free_teb = ptr;
@@ -2692,17 +2697,16 @@ void virtual_free_teb( TEB *teb )
 NTSTATUS virtual_clear_tls_index( ULONG index )
 {
     struct ntdll_thread_data *thread_data;
-    sigset_t sigset;
 
     if (index < TLS_MINIMUM_AVAILABLE)
     {
-        server_enter_uninterrupted_section( &virtual_mutex, &sigset );
+        pthread_rwlock_rdlock( &teb_list_lock );
         LIST_FOR_EACH_ENTRY( thread_data, &teb_list, struct ntdll_thread_data, entry )
         {
             TEB *teb = CONTAINING_RECORD( thread_data, TEB, GdiTebBatch );
             teb->TlsSlots[index] = 0;
         }
-        server_leave_uninterrupted_section( &virtual_mutex, &sigset );
+        pthread_rwlock_unlock( &teb_list_lock );
     }
     else
     {
@@ -2710,13 +2714,13 @@ NTSTATUS virtual_clear_tls_index( ULONG index )
         if (index >= 8 * sizeof(NtCurrentTeb()->Peb->TlsExpansionBitmapBits))
             return STATUS_INVALID_PARAMETER;
 
-        server_enter_uninterrupted_section( &virtual_mutex, &sigset );
+        pthread_rwlock_rdlock( &teb_list_lock );
         LIST_FOR_EACH_ENTRY( thread_data, &teb_list, struct ntdll_thread_data, entry )
         {
             TEB *teb = CONTAINING_RECORD( thread_data, TEB, GdiTebBatch );
             if (teb->TlsExpansionSlots) teb->TlsExpansionSlots[index] = 0;
         }
-        server_leave_uninterrupted_section( &virtual_mutex, &sigset );
+        pthread_rwlock_unlock( &teb_list_lock );
     }
     return STATUS_SUCCESS;
 }
-- 
2.29.2

