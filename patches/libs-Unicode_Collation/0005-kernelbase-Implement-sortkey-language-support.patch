From 74ed8758a238f1747055b4c8fa78edc2d5e7aba9 Mon Sep 17 00:00:00 2001
From: Fabian Maurer <dark.shadow4@web.de>
Date: Sat, 8 Aug 2020 17:32:56 +0200
Subject: [PATCH] kernelbase: Implement sortkey language support

Signed-off-by: Fabian Maurer <dark.shadow4@web.de>
---
 dlls/kernel32/tests/locale.c | 50 ++++++++++++++++++
 dlls/kernelbase/locale.c     | 99 +++++++++++++++++++++---------------
 2 files changed, 109 insertions(+), 40 deletions(-)

diff --git a/dlls/kernel32/tests/locale.c b/dlls/kernel32/tests/locale.c
index 0aaa87e38c1..84931318075 100644
--- a/dlls/kernel32/tests/locale.c
+++ b/dlls/kernel32/tests/locale.c
@@ -3210,6 +3210,56 @@ static const struct sorting_test_entry unicode_sorting_tests[] =
     { L"en-US", CSTR_LESS_THAN,    CSTR_EQUAL,        0, L"\x0f75", L"\x0f71\x0f74" }, /* Expansion character always follow default character logic */
     { L"en-US", CSTR_LESS_THAN,    CSTR_EQUAL,        0, L"\xfc5e", L"\x064c\x0651" }, /* Expansion character always follow default character logic */
     { L"en-US", CSTR_LESS_THAN,    CSTR_EQUAL,        0, L"\xfb2b", L"\x05e9\x05c2" }, /* Expansion character always follow default character logic */
+    { L"ja-JP", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x6df8", L"\x654b\x29e9" }, /* Japanese locale */
+    { L"ja-JP", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x685d\x1239\x1b61", L"\x59b6\x6542\x2a62\x04a7" },
+    { L"ja-JP", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x62f3\x43e9", L"\x5760" },
+    { L"ja-JP", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x634c", L"\x2f0d\x5f1c\x7124" },
+    { L"ja-JP", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x69e7\x0502", L"\x57cc" },
+    { L"ja-JP", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x7589", L"\x67c5" },
+    { L"ja-JP", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x5ede\x765c", L"\x7324" },
+    { L"ja-JP", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x5c7f\x5961", L"\x7cbe" },
+    { L"ja-JP", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x3162", L"\x6a84\x1549\x0b60" },
+    { L"ja-JP", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x769e\x448e", L"\x4e6e" },
+    { L"ja-JP", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x59a4", L"\x5faa\x607c" },
+    { L"ja-JP", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x529b", L"\x733f" },
+    { L"ja-JP", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x6ff8\x2a0a", L"\x7953\x6712" },
+    { L"ja-JP", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x6dfb", L"\x6793" },
+    { L"ja-JP", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x67ed", L"\x6aa2" },
+    { L"ja-JP", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x4e61", L"\x6350\x6b08" },
+    { L"ja-JP", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x5118", L"\x53b3\x75b4" },
+    { L"ja-JP", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x6bbf", L"\x65a3" },
+    { L"ja-JP", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x5690", L"\x5fa8" },
+    { L"ja-JP", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x61e2", L"\x76e5" },
+    { L"ko-KR", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x8db6", L"\xd198" },
+    { L"ko-KR", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x8f72", L"\xd2b9" },
+    { L"ko-KR", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x91d8", L"\xd318" },
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x8db6", L"\xd198" },
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x8f72", L"\xd2b9" },
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x91d8", L"\xd318" },
+    { L"cs-CZ", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x0160", L"\x0219" },
+    { L"cs-CZ", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x059a", L"\x0308" },
+    { L"cs-CZ", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x013a", L"\x013f" },
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x0160", L"\x0219" },
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x059a", L"\x0308" },
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x013a", L"\x013f" },
+    { L"vi-VN", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x1d8f", L"\x1ea8" },
+    { L"vi-VN", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x0323", L"\xfe26" },
+    { L"vi-VN", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"R",      L"\xff32" },
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x1d8f", L"\x1ea8" },
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x0323", L"\xfe26" },
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"R",      L"\xff32" },
+    { L"zh-HK", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x83ae", L"\x71b9" },
+    { L"zh-HK", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x7e50", L"\xc683" },
+    { L"zh-HK", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x6c69", L"\x7f8a" },
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x83ae", L"\x71b9" },
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x7e50", L"\xc683" },
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x6c69", L"\x7f8a" },
+    { L"tr-TR", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x00dc", L"\x1ee9" },
+    { L"tr-TR", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x00fc", L"\x1ee6" },
+    { L"tr-TR", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x0152", L"\x00d6" },
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x00dc", L"\x1ee9" },
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x00fc", L"\x1ee6" },
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x0152", L"\x00d6" },
 };
 
 static void test_unicode_sorting(void)
diff --git a/dlls/kernelbase/locale.c b/dlls/kernelbase/locale.c
index e81ed0e0f2e..394912307a9 100644
--- a/dlls/kernelbase/locale.c
+++ b/dlls/kernelbase/locale.c
@@ -2530,9 +2530,27 @@ struct sortkey_data
     int buffer_len;
 };
 
-static void sortkey_get_char(struct character_info *info, WCHAR ch)
+static DWORD sortkey_get_exception(WCHAR ch, const struct sortguid *locale)
 {
-    DWORD value = sort.keys[ch];
+    if (locale && locale->except)
+    {
+        DWORD *table = sort.keys + locale->except;
+        DWORD hi = ch >> 8;
+        DWORD lo = ch & 0xff;
+        if (table[hi] == hi * 0x100)
+            return 0;
+        if (sort.keys[table[hi] + lo] == sort.keys[hi * 0x100 + lo])
+            return 0;
+        return sort.keys[table[hi] + lo];
+    }
+    return 0;
+}
+
+static void sortkey_get_char(struct character_info *info, WCHAR ch, const struct sortguid *locale)
+{
+    DWORD value = sortkey_get_exception(ch, locale);
+    if (!value)
+        value = sort.keys[ch];
     info->weight_case = value >> 24;
     info->weight_diacritic = (value >> 16) & 0xff;
     info->script_member = (value >> 8) & 0xff;
@@ -2584,18 +2602,18 @@ static void sortkey_add_diacritic_weight(struct sortkey_data *data, BYTE value,
         *last_weighted_pos = data->buffer_pos;
 }
 
-static void sortkey_handle_expansion_main(struct sortkey_data *data, int flags, WCHAR c)
+static void sortkey_handle_expansion_main(struct sortkey_data *data, int flags, WCHAR c, const struct sortguid *locale)
 {
     struct character_info info;
     const WCHAR *expansion = sortkey_get_expansion(c);
     if (expansion)
     {
         /* Expansion characters always follow default character logic, ignoring the script_member value */
-        sortkey_handle_expansion_main(data, flags, expansion[0]);
-        sortkey_handle_expansion_main(data, flags, expansion[1]);
+        sortkey_handle_expansion_main(data, flags, expansion[0], locale);
+        sortkey_handle_expansion_main(data, flags, expansion[1], locale);
         return;
     }
-    sortkey_get_char(&info, c);
+    sortkey_get_char(&info, c, locale);
     if (info.script_member != SORTKEY_UNSORTABLE)
     {
         sortkey_add_weight(data, info.script_member);
@@ -2605,11 +2623,11 @@ static void sortkey_handle_expansion_main(struct sortkey_data *data, int flags,
     }
 }
 
-static void sortkey_add_main_weights(struct sortkey_data *data, int flags, WCHAR c)
+static void sortkey_add_main_weights(struct sortkey_data *data, int flags, WCHAR c, const struct sortguid *locale)
 {
     struct character_info info;
 
-    sortkey_get_char(&info, c);
+    sortkey_get_char(&info, c, locale);
 
     switch (info.script_member)
     {
@@ -2617,7 +2635,7 @@ static void sortkey_add_main_weights(struct sortkey_data *data, int flags, WCHAR
         break;
 
     case SORTKEY_EXPANSION:
-        sortkey_handle_expansion_main(data, flags, c);
+        sortkey_handle_expansion_main(data, flags, c, locale);
         break;
 
     case SORTKEY_DIACRITIC:
@@ -2676,18 +2694,18 @@ static void sortkey_add_main_weights(struct sortkey_data *data, int flags, WCHAR
     }
 }
 
-static void sortkey_handle_expansion_diacritic(struct sortkey_data *data, int flags, WCHAR c, int *last_weighted_pos)
+static void sortkey_handle_expansion_diacritic(struct sortkey_data *data, int flags, WCHAR c, int *last_weighted_pos, const struct sortguid *locale)
 {
     struct character_info info;
     const WCHAR *expansion = sortkey_get_expansion(c);
     if (expansion)
     {
         /* Expansion characters always follow default character logic, ignoring the script_member value */
-        sortkey_handle_expansion_diacritic(data, flags, expansion[0], last_weighted_pos);
-        sortkey_handle_expansion_diacritic(data, flags, expansion[1], last_weighted_pos);
+        sortkey_handle_expansion_diacritic(data, flags, expansion[0], last_weighted_pos, locale);
+        sortkey_handle_expansion_diacritic(data, flags, expansion[1], last_weighted_pos, locale);
         return;
     }
-    sortkey_get_char(&info, c);
+    sortkey_get_char(&info, c, locale);
     if (info.script_member != SORTKEY_UNSORTABLE)
     {
         if (!sortkey_is_PUA(info.script_member))
@@ -2695,12 +2713,12 @@ static void sortkey_handle_expansion_diacritic(struct sortkey_data *data, int fl
     }
 }
 
-static void sortkey_add_diacritic_weights(struct sortkey_data *data, int flags, WCHAR c, int *last_weighted_pos, int diacritic_start_pos)
+static void sortkey_add_diacritic_weights(struct sortkey_data *data, int flags, WCHAR c, int *last_weighted_pos, int diacritic_start_pos, const struct sortguid *locale)
 {
     struct character_info info;
     int old_pos;
 
-    sortkey_get_char(&info, c);
+    sortkey_get_char(&info, c, locale);
 
     switch (info.script_member)
     {
@@ -2708,7 +2726,7 @@ static void sortkey_add_diacritic_weights(struct sortkey_data *data, int flags,
         break;
 
     case SORTKEY_EXPANSION:
-        sortkey_handle_expansion_diacritic(data, flags, c, last_weighted_pos);
+        sortkey_handle_expansion_diacritic(data, flags, c, last_weighted_pos, locale);
         break;
 
     case SORTKEY_DIACRITIC:
@@ -2764,29 +2782,29 @@ static void sortkey_add_diacritic_weights(struct sortkey_data *data, int flags,
     }
 }
 
-static void sortkey_handle_expansion_case(struct sortkey_data *data, int flags, WCHAR c)
+static void sortkey_handle_expansion_case(struct sortkey_data *data, int flags, WCHAR c, const struct sortguid *locale)
 {
     struct character_info info;
     const WCHAR *expansion = sortkey_get_expansion(c);
     if (expansion)
     {
         /* Expansion characters always follow default character logic, ignoring the script_member value */
-        sortkey_handle_expansion_case(data, flags, expansion[0]);
-        sortkey_handle_expansion_case(data, flags, expansion[1]);
+        sortkey_handle_expansion_case(data, flags, expansion[0], locale);
+        sortkey_handle_expansion_case(data, flags, expansion[1], locale);
         return;
     }
-    sortkey_get_char(&info, c);
+    sortkey_get_char(&info, c, locale);
     if (info.script_member != SORTKEY_UNSORTABLE)
     {
         sortkey_add_case_weight(data, flags, info.weight_case);
     }
 }
 
-static void sortkey_add_case_weights(struct sortkey_data *data, int flags, WCHAR c)
+static void sortkey_add_case_weights(struct sortkey_data *data, int flags, WCHAR c, const struct sortguid *locale)
 {
     struct character_info info;
 
-    sortkey_get_char(&info, c);
+    sortkey_get_char(&info, c, locale);
 
     switch (info.script_member)
     {
@@ -2794,7 +2812,7 @@ static void sortkey_add_case_weights(struct sortkey_data *data, int flags, WCHAR
         break;
 
     case SORTKEY_EXPANSION:
-        sortkey_handle_expansion_case(data, flags, c);
+        sortkey_handle_expansion_case(data, flags, c, locale);
         break;
 
     case SORTKEY_DIACRITIC:
@@ -2836,12 +2854,12 @@ static void sortkey_add_case_weights(struct sortkey_data *data, int flags, WCHAR
     }
 }
 
-static void sortkey_add_special_weights(struct sortkey_data *data, int flags, WCHAR c)
+static void sortkey_add_special_weights(struct sortkey_data *data, int flags, WCHAR c, const struct sortguid *locale)
 {
     struct character_info info;
     BYTE weight_second;
 
-    sortkey_get_char(&info, c);
+    sortkey_get_char(&info, c, locale);
 
     if (info.script_member == SORTKEY_PUNCTUATION)
     {
@@ -2854,11 +2872,11 @@ static void sortkey_add_special_weights(struct sortkey_data *data, int flags, WC
     }
 }
 
-static void sortkey_add_extra_weights_small(struct sortkey_data *data, int flags, WCHAR c)
+static void sortkey_add_extra_weights_small(struct sortkey_data *data, int flags, WCHAR c, const struct sortguid *locale)
 {
     struct character_info info;
 
-    sortkey_get_char(&info, c);
+    sortkey_get_char(&info, c, locale);
 
     if (info.script_member == SORTKEY_JAPANESE)
     {
@@ -2876,11 +2894,11 @@ static void sortkey_add_extra_weights_small(struct sortkey_data *data, int flags
     }
 }
 
-static void sortkey_add_extra_weights_kana(struct sortkey_data *data, int flags, WCHAR c)
+static void sortkey_add_extra_weights_kana(struct sortkey_data *data, int flags, WCHAR c, const struct sortguid *locale)
 {
     struct character_info info;
 
-    sortkey_get_char(&info, c);
+    sortkey_get_char(&info, c, locale);
 
     if (info.script_member == SORTKEY_JAPANESE)
     {
@@ -2897,11 +2915,11 @@ static void sortkey_add_extra_weights_kana(struct sortkey_data *data, int flags,
     }
 }
 
-static void sortkey_add_extra_weights_width(struct sortkey_data *data, int flags, WCHAR c)
+static void sortkey_add_extra_weights_width(struct sortkey_data *data, int flags, WCHAR c, const struct sortguid *locale)
 {
     struct character_info info;
 
-    sortkey_get_char(&info, c);
+    sortkey_get_char(&info, c, locale);
 
     if (info.script_member == SORTKEY_JAPANESE)
     {
@@ -2918,13 +2936,14 @@ static void sortkey_add_extra_weights_width(struct sortkey_data *data, int flags
     }
 }
 
-static int sortkey_generate(int flags, const WCHAR *locale, const WCHAR *str, int str_len, BYTE *buffer, int buffer_len)
+static int sortkey_generate(int flags, const WCHAR *locale_name, const WCHAR *str, int str_len, BYTE *buffer, int buffer_len)
 {
     static const BYTE SORTKEY_SEPARATOR = 1;
     static const BYTE SORTKEY_TERMINATOR = 0;
     static const BYTE SORTKEY_EXTRA_SEPARATOR = 0xff;
     int i;
     struct sortkey_data data;
+    const struct sortguid *locale = get_language_sort(locale_name);
 
     data.buffer = buffer;
     data.buffer_pos = 0;
@@ -2935,7 +2954,7 @@ static int sortkey_generate(int flags, const WCHAR *locale, const WCHAR *str, in
 
     /* Main weights */
     for (i = 0; i < str_len; i++)
-        sortkey_add_main_weights(&data, flags, str[i]);
+        sortkey_add_main_weights(&data, flags, str[i], locale);
     sortkey_add_weight(&data, SORTKEY_SEPARATOR);
 
     /* Diacritic weights */
@@ -2944,7 +2963,7 @@ static int sortkey_generate(int flags, const WCHAR *locale, const WCHAR *str, in
         int diacritic_start_pos = data.buffer_pos;
         int last_weighted_pos = data.buffer_pos;
         for (i = 0; i < str_len; i++)
-            sortkey_add_diacritic_weights(&data, flags, str[i], &last_weighted_pos, diacritic_start_pos);
+            sortkey_add_diacritic_weights(&data, flags, str[i], &last_weighted_pos, diacritic_start_pos, locale);
         /* Remove all weights <= SORTKEY_MIN_WEIGHT from the end */
         data.buffer_pos = last_weighted_pos;
     }
@@ -2952,24 +2971,24 @@ static int sortkey_generate(int flags, const WCHAR *locale, const WCHAR *str, in
 
     /* Case weights */
     for (i = 0; i < str_len; i++)
-        sortkey_add_case_weights(&data, flags, str[i]);
+        sortkey_add_case_weights(&data, flags, str[i], locale);
     sortkey_add_weight(&data, SORTKEY_SEPARATOR);
 
     /* Extra weights */
     for (i = 0; i < str_len; i++)
-        sortkey_add_extra_weights_small(&data, flags, str[i]);
+        sortkey_add_extra_weights_small(&data, flags, str[i], locale);
     sortkey_add_weight(&data, SORTKEY_EXTRA_SEPARATOR);
     for (i = 0; i < str_len; i++)
-        sortkey_add_extra_weights_kana(&data, flags, str[i]);
+        sortkey_add_extra_weights_kana(&data, flags, str[i], locale);
     sortkey_add_weight(&data, SORTKEY_EXTRA_SEPARATOR);
     for (i = 0; i < str_len; i++)
-        sortkey_add_extra_weights_width(&data, flags, str[i]);
+        sortkey_add_extra_weights_width(&data, flags, str[i], locale);
     sortkey_add_weight(&data, SORTKEY_EXTRA_SEPARATOR);
     sortkey_add_weight(&data, SORTKEY_SEPARATOR);
 
     /* Special weights */
     for (i = 0; i < str_len; i++)
-        sortkey_add_special_weights(&data, flags, str[i]);
+        sortkey_add_special_weights(&data, flags, str[i], locale);
     sortkey_add_weight(&data, SORTKEY_TERMINATOR);
 
     if (data.buffer_pos <= buffer_len || !buffer)
@@ -5667,7 +5686,7 @@ INT WINAPI DECLSPEC_HOTPATCH LCMapStringEx( const WCHAR *locale, DWORD flags, co
         TRACE( "(%s,0x%08lx,%s,%d,%p,%d)\n",
                debugstr_w(locale), flags, debugstr_wn(src, srclen), srclen, dst, dstlen );
 
-        if (!(ret = sortkey_generate(flags, L"", src, srclen, (BYTE *)dst, dstlen )))
+        if (!(ret = sortkey_generate(flags, locale, src, srclen, (BYTE *)dst, dstlen )))
             SetLastError( ERROR_INSUFFICIENT_BUFFER );
         return ret;
     }
-- 
2.34.1

