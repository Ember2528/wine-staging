From dca517521550923c881c95659f2309756c84d597 Mon Sep 17 00:00:00 2001
From: Fabian Maurer <dark.shadow4@web.de>
Date: Sat, 8 Aug 2020 16:47:15 +0200
Subject: [PATCH] kernelbase: Implement sortkey punctuation

Signed-off-by: Fabian Maurer <dark.shadow4@web.de>
---
 dlls/kernel32/tests/locale.c | 29 +++++++++++++++++++++++++++++
 dlls/kernelbase/locale.c     | 35 +++++++++++++++++++++++++++++++----
 2 files changed, 60 insertions(+), 4 deletions(-)

diff --git a/dlls/kernel32/tests/locale.c b/dlls/kernel32/tests/locale.c
index d875bf94f92..25c460f4175 100644
--- a/dlls/kernel32/tests/locale.c
+++ b/dlls/kernel32/tests/locale.c
@@ -3210,6 +3210,35 @@ static const struct sorting_test_entry unicode_sorting_tests[] =
     { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        0, L"A\x0301\x0301", L"A\x0301\x00ad\x0301" }, /* Unsortable combined with diacritics */
     { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        0, L"b\x07f2\x07f2", L"b\x07f2\x2064\x07f2" }, /* Unsortable combined with diacritics */
     { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        0, L"X\x0337\x0337", L"X\x0337\xfffd\x0337" }, /* Unsortable combined with diacritics */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        NORM_IGNORECASE, L"c", L"C" },
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        NORM_IGNORECASE, L"e", L"E" },
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        NORM_IGNORECASE, L"A", L"a" },
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x001b", L"\x001c" }, /* Punctuation primary weight */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x0005", L"\x0006" }, /* Punctuation primary weight */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x0027", L"\xff07", TRUE }, /* Punctuation diacritic/case weight */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x07f4", L"\x07f5", TRUE }, /* Punctuation diacritic/case weight */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x207b", L"\x0008" }, /* Punctuation diacritic/case weight */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x207b", L"\x0008" }, /* Punctuation */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x0004", L"\x0011" }, /* Punctuation */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\xff07", L"\x07f4" }, /* Punctuation primary weight has priority */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\xfe32", L"\x2014" }, /* Punctuation primary weight has priority */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x058a", L"\x2027" }, /* Punctuation primary weight has priority */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        NORM_IGNORESYMBOLS, L"\x207b", L"\x0008" }, /* Punctuation */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        NORM_IGNORESYMBOLS, L"\x0004", L"\x0011" }, /* Punctuation */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, SORT_STRINGSORT, L"\x207b", L"\x0008" }, /* Punctuation */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    SORT_STRINGSORT, L"\x0004", L"\x0011" }, /* Punctuation */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        NORM_IGNORESYMBOLS | SORT_STRINGSORT, L"\x207b", L"\x0008" }, /* Punctuation */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        NORM_IGNORESYMBOLS | SORT_STRINGSORT, L"\x0004", L"\x0011" }, /* Punctuation */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    SORT_STRINGSORT, L"\x001a", L"\x001b" }, /* Punctuation main weight */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, SORT_STRINGSORT, L"\x2027", L"\x2011" }, /* Punctuation main weight */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, SORT_STRINGSORT, L"\x3030", L"\x301c" }, /* Punctuation main weight */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, SORT_STRINGSORT, L"\x058a", L"\x2010" }, /* Punctuation diacritic weight */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, SORT_STRINGSORT, L"\x07F5", L"\x07F4" }, /* Punctuation diacritic weight */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, SORT_STRINGSORT, L"\xfe32", L"\x2013" }, /* Punctuation case weight */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, SORT_STRINGSORT, L"\xfe31", L"\xfe58" }, /* Punctuation case weight */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, SORT_STRINGSORT, L"\xff07", L"\x0027" }, /* Punctuation case weight */
+
+
 };
 
 static void test_unicode_sorting(void)
diff --git a/dlls/kernelbase/locale.c b/dlls/kernelbase/locale.c
index 3a29f3e8250..bce705ab484 100644
--- a/dlls/kernelbase/locale.c
+++ b/dlls/kernelbase/locale.c
@@ -2556,7 +2556,11 @@ static void sortkey_add_main_weights(struct sortkey_data *data, int flags, WCHAR
         break;
 
     case SORTKEY_PUNCTUATION:
-        /* TODO */
+        if ((flags & NORM_IGNORESYMBOLS) || !(flags & SORT_STRINGSORT))
+            break;
+
+        sortkey_add_weight(data, info.script_member);
+        sortkey_add_weight(data, info.weight_primary);
         break;
 
     case SORTKEY_SYMBOL_1:
@@ -2619,7 +2623,9 @@ static void sortkey_add_diacritic_weights(struct sortkey_data *data, int flags,
         break;
 
     case SORTKEY_PUNCTUATION:
-        /* TODO */
+        if ((flags & NORM_IGNORESYMBOLS) || !(flags & SORT_STRINGSORT))
+            break;
+        sortkey_add_diacritic_weight(data, info.weight_diacritic, last_weighted_pos);
         break;
 
     case SORTKEY_SYMBOL_1:
@@ -2660,7 +2666,9 @@ static void sortkey_add_case_weights(struct sortkey_data *data, int flags, WCHAR
         break;
 
     case SORTKEY_PUNCTUATION:
-        /* TODO */
+        if ((flags & NORM_IGNORESYMBOLS) || !(flags & SORT_STRINGSORT))
+            break;
+        sortkey_add_case_weight(data, flags, info.weight_case);
         break;
 
     case SORTKEY_SYMBOL_1:
@@ -2680,6 +2688,24 @@ static void sortkey_add_case_weights(struct sortkey_data *data, int flags, WCHAR
     }
 }
 
+static void sortkey_add_special_weights(struct sortkey_data *data, int flags, WCHAR c)
+{
+    struct character_info info;
+    BYTE weight_second;
+
+    sortkey_get_char(&info, c);
+
+    if (info.script_member == SORTKEY_PUNCTUATION)
+    {
+        if ((flags & NORM_IGNORESYMBOLS) || (flags & SORT_STRINGSORT))
+            return;
+
+        weight_second = (BYTE)(info.weight_diacritic * 8 + info.weight_case);
+        sortkey_add_weight(data, info.weight_primary);
+        sortkey_add_weight(data, weight_second);
+    }
+}
+
 static int sortkey_generate(int flags, const WCHAR *locale, const WCHAR *str, int str_len, BYTE *buffer, int buffer_len)
 {
     static const BYTE SORTKEY_SEPARATOR = 1;
@@ -2721,7 +2747,8 @@ static int sortkey_generate(int flags, const WCHAR *locale, const WCHAR *str, in
     sortkey_add_weight(&data, SORTKEY_SEPARATOR);
 
     /* Special weights */
-    /* TODO */
+    for (i = 0; i < str_len; i++)
+        sortkey_add_special_weights(&data, flags, str[i]);
     sortkey_add_weight(&data, SORTKEY_TERMINATOR);
 
     if (data.buffer_pos <= buffer_len || !buffer)
-- 
2.29.2

