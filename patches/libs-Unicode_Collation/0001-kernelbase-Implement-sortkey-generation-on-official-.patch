From 798934ff91c9ed7b445af4b8c7e6442fede713fb Mon Sep 17 00:00:00 2001
From: Fabian Maurer <dark.shadow4@web.de>
Date: Fri, 10 Apr 2020 18:47:18 +0200
Subject: [PATCH] kernelbase: Implement sortkey generation on official tables

Signed-off-by: Fabian Maurer <dark.shadow4@web.de>
---
 dlls/kernel32/tests/locale.c | 137 ++++++++++++
 dlls/kernelbase/locale.c     | 399 ++++++++++++++++++++++++-----------
 2 files changed, 413 insertions(+), 123 deletions(-)

diff --git a/dlls/kernel32/tests/locale.c b/dlls/kernel32/tests/locale.c
index 42e14eb736f..29cfe95a47b 100644
--- a/dlls/kernel32/tests/locale.c
+++ b/dlls/kernel32/tests/locale.c
@@ -2692,6 +2692,13 @@ static void test_lcmapstring_unicode(lcmapstring_wrapper func_ptr, const char *f
     lstrlenW(symbols_stripped) + 1, ret);
     ok(!lstrcmpW(buf, symbols_stripped), "%s string comparison mismatch\n", func_name);
 
+    /* test small buffer */
+    lstrcpyW(buf, fooW);
+    ret = func_ptr(LCMAP_SORTKEY, lower_case, -1, buf, 2);
+    ok(ret == 0, "Expected a failure\n");
+    ok(GetLastError() == ERROR_INSUFFICIENT_BUFFER,
+           "%s unexpected error code %d\n", func_name, GetLastError());;
+
     /* test srclen = 0 */
     SetLastError(0xdeadbeef);
     ret = func_ptr(0, upper_case, 0, buf, ARRAY_SIZE(buf));
@@ -3114,6 +3121,135 @@ static void test_sorting(void)
     }
 }
 
+struct sorting_test_entry {
+    const WCHAR *locale;
+    int result_sortkey;
+    int result_compare;
+    DWORD flags;
+    const WCHAR *first;
+    const WCHAR *second;
+    BOOL broken_on_xp;
+};
+
+static const struct sorting_test_entry unicode_sorting_tests[] =
+{
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x0037", L"\x277c", TRUE }, /* Normal character */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x1eca", L"\x1ecb" }, /* Normal character */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x1d05", L"\x1d48" }, /* Normal character */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x19d7", L"\x096d" }, /* Normal character diacritics */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x00f5", L"\x1ecf" }, /* Normal character diacritics */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x2793", L"\x0d70", TRUE }, /* Normal character diacritics */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"A", L"a" }, /* Normal character case weights */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"z", L"Z" }, /* Normal character case weights */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\xe5a6", L"\xe5a5\x0333", TRUE }, /* PUA character */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\xe5d7", L"\xe5d6\x0330", TRUE }, /* PUA character */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\u276a", L"\u2768" }, /* Symbols add diacritic weight */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\u204d", L"\uff02" }, /* Symbols add case weight */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\ue6e3\u0a02", L"\ue6e3\u20dc", TRUE }, /* Default character, when there is main weight extra there must be no diacritic weight */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        0, L"a \u2060 b", L"a  b" }, /* Unsortable characters */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        0, L"a \xfff0 b", L"a  b" }, /* Invalid/undefined characters */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        0, L"a\x139F a", L"a a" }, /* Invalid/undefined characters  */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"a\x139F a", L"a b" }, /* Invalid/undefinde characters  */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x00fc", L"\x016d" }, /* Default characters */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x3fcb\x7fd5", L"\x0006\x3032" }, /* Default characters */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x00fc\x30fd", L"\x00fa\x1833" }, /* Default characters */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x1B56\x0330", L"\x1096" }, /* Diacritic is added */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x1817\x0333", L"\x19d7" }, /* Diacritic is added */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x04de\x05ac", L"\x0499" }, /* Diacritic is added */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x01ba\x0654", L"\x01b8" }, /* Diacritic can overflow */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x06b7\x06eb", L"\x06b6" }, /* Diacritic can overflow */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x1420\x0333", L"\x141f" }, /* Diacritic can overflow */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN ,0, L"\x1b56\x0654", L"\x1b56\x0655" }, /* Diacritic can overflow */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x1b56\x0654\x0654", L"\x1b56\x0655" }, /* Diacritic can overflow */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x11bc", L"\x110b" }, /* Jamo case weight */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x11c1", L"\x1111" }, /* Jamo case weight */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x11af", L"\x1105" }, /* Jamo case weight */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x11c2", L"\x11f5" }, /* Jamo main weight */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x1108", L"\x1121" }, /* Jamo main weight */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x1116", L"\x11c7" }, /* Jamo main weight */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x11b1", L"\x11d1" }, /* Jamo main weight */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x4550\x73d2", L"\x3211\x23ad" }, /* CJK main weight 1 */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x3265", L"\x4079" }, /* CJK main weight 1 */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x4c19\x68d0\x52d0", L"\x316d" }, /* CJK main weight 1 */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x72dd", L"\x6b8a" }, /* CJK main weight 2 */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x6785\x3bff\x6f83", L"\x7550\x34c9\x71a7" }, /* CJK main weight 2 */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x5d61", L"\x3aef" }, /* CJK main weight 2 */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x207a", L"\xfe62" }, /* Symbols case weights */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\xfe65", L"\xff1e" }, /* Symbols case weights */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\x2502", L"\xffe8" }, /* Symbols case weights */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x21da", L"\x21dc" }, /* Symbols diacritic weights */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x29fb", L"\x2295" }, /* Symbols diacritic weights */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x0092", L"\x009c" }, /* Symbols diacritic weights */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        NORM_IGNORESYMBOLS, L"\x21da", L"\x21dc" }, /* NORM_IGNORESYMBOLS */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        NORM_IGNORESYMBOLS, L"\x29fb", L"\x2295" }, /* NORM_IGNORESYMBOLS */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        NORM_IGNORESYMBOLS, L"\x0092", L"\x009c" }, /* NORM_IGNORESYMBOLS */
+    { L"en-US", CSTR_EQUAL,        CSTR_LESS_THAN,    0, L"\x3099", L"\x309a" }, /* Small diacritic weights at the end get ignored */
+    { L"en-US", CSTR_EQUAL,        CSTR_LESS_THAN,    0, L"\x309b", L"\x05a2" }, /* Small diacritic weights at the end get ignored */
+    { L"en-US", CSTR_EQUAL,        CSTR_LESS_THAN,    0, L"\xff9e", L"\x0e47" }, /* Small diacritic weights at the end get ignored */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"a b", L"\x0103 a" }, /* Main weights have priority over diacritic weights */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"a",   L"\x0103" },   /* Main weights have priority over diacritic weights */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"e x", L"\x0113 v" }, /* Main weights have priority over diacritic weights */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"e",   L"\x0113" },   /* Main weights have priority over diacritic weights */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"c s", L"\x0109 r" }, /* Main weights have priority over diacritic weights */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"c",   L"\x0109" },   /* Main weights have priority over diacritic weights */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"a \x0103", L"A a" }, /* Diacritic weights have priority over case weights */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"a",        L"A" },   /* Diacritic weights have priority over case weights */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"e \x0113", L"E e" }, /* Diacritic weights have priority over case weights */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"e",        L"E" },   /* Diacritic weights have priority over case weights */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"c \x0109", L"C c" }, /* Diacritic weights have priority over case weights */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"c",        L"C" },   /* Diacritic weights have priority over case weights */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    NORM_IGNORENONSPACE, L"\x1152", L"\x1153" }, /* Diacritic values for Jamo are not ignored */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    NORM_IGNORENONSPACE, L"\x1143", L"\x1145" }, /* Diacritic values for Jamo are not ignored */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    NORM_IGNORENONSPACE, L"\x1196", L"\x1174" }, /* Diacritic values for Jamo are not ignored */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\x318e", L"\x382a" }, /* Jungseong < PUA */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\xffcb", L"\x3d13" }, /* Jungseong < PUA */
+    { L"en-US", CSTR_LESS_THAN,    CSTR_LESS_THAN,    0, L"\xffcc", L"\x8632" }, /* Jungseong < PUA */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\xd847", L"\x382a" }, /* Surrogate > PUA */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\xd879", L"\x3d13" }, /* Surrogate > PUA */
+    { L"en-US", CSTR_GREATER_THAN, CSTR_GREATER_THAN, 0, L"\xd850", L"\x8632" }, /* Surrogate > PUA */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        0, L"A\x0301\x0301", L"A\x0301\x00ad\x0301" }, /* Unsortable combined with diacritics */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        0, L"b\x07f2\x07f2", L"b\x07f2\x2064\x07f2" }, /* Unsortable combined with diacritics */
+    { L"en-US", CSTR_EQUAL,        CSTR_EQUAL,        0, L"X\x0337\x0337", L"X\x0337\xfffd\x0337" }, /* Unsortable combined with diacritics */
+};
+
+static void test_unicode_sorting(void)
+{
+    int i;
+    int ret1;
+    int ret2;
+    BYTE buffer[1000];
+    if (!pLCMapStringEx)
+    {
+        win_skip("LCMapStringEx not available\n");
+        return;
+    }
+    for (i = 0; i < ARRAY_SIZE(unicode_sorting_tests); i++)
+    {
+        BYTE buff1[1000];
+        BYTE buff2[1000];
+        int len1, len2;
+        int result;
+        const struct sorting_test_entry *entry = &unicode_sorting_tests[i];
+
+        len1 = pLCMapStringEx(entry->locale, LCMAP_SORTKEY | entry->flags, entry->first, -1, (WCHAR*)buff1, ARRAY_SIZE(buff1), NULL, NULL, 0);
+        len2 = pLCMapStringEx(entry->locale, LCMAP_SORTKEY | entry->flags, entry->second, -1, (WCHAR*)buff2, ARRAY_SIZE(buff2), NULL, NULL, 0);
+
+        result = memcmp(buff1, buff2, min(len1, len2)) + 2;
+
+        ok (result == entry->result_sortkey || broken(entry->broken_on_xp), "Test %d (%s, %s) - Expected %d, got %d\n",
+            i, wine_dbgstr_w(entry->first), wine_dbgstr_w(entry->second), entry->result_sortkey, result);
+
+        result = CompareStringEx(entry->locale, entry->flags,  entry->first, -1, entry->second, -1, NULL, NULL, 0);
+        if (strcmp(winetest_platform, "wine")) // Disable test on wine for now
+            ok (result == entry->result_compare || broken(entry->broken_on_xp), "Test %d (%s, %s) - Expected %d, got %d\n",
+                i, wine_dbgstr_w(entry->first), wine_dbgstr_w(entry->second), entry->result_compare, result);
+    }
+    /* Test diacritics when buffer is short */
+    ret1 = pLCMapStringEx(L"en-US", LCMAP_SORTKEY, L"\x0e49\x0e49\x0e49\x0e49\x0e49", -1, (WCHAR*)buffer, 20, NULL, NULL, 0);
+    ret2 = pLCMapStringEx(L"en-US", LCMAP_SORTKEY, L"\x0e49\x0e49\x0e49\x0e49\x0e49", -1, (WCHAR*)buffer, 0, NULL, NULL, 0);
+    ok(ret1 == ret2, "Got ret1=%d, ret2=%d\n", ret1, ret2);
+}
+
 static void test_FoldStringA(void)
 {
   int ret, i, j;
@@ -7180,4 +7316,5 @@ START_TEST(locale)
   test_geo_name();
   /* this requires collation table patch to make it MS compatible */
   if (0) test_sorting();
+  test_unicode_sorting();
 }
diff --git a/dlls/kernelbase/locale.c b/dlls/kernelbase/locale.c
index 24e8cd3f338..0e40db40f72 100644
--- a/dlls/kernelbase/locale.c
+++ b/dlls/kernelbase/locale.c
@@ -2161,127 +2161,6 @@ static int wcstombs_codepage( UINT codepage, DWORD flags, const WCHAR *src, int
         return wcstombs_sbcs( info, src, srclen, dst, dstlen );
 }
 
-
-static int get_sortkey( DWORD flags, const WCHAR *src, int srclen, char *dst, int dstlen )
-{
-    WCHAR dummy[4]; /* no decomposition is larger than 4 chars */
-    int key_len[4];
-    char *key_ptr[4];
-    const WCHAR *src_save = src;
-    int srclen_save = srclen;
-
-    key_len[0] = key_len[1] = key_len[2] = key_len[3] = 0;
-    for (; srclen; srclen--, src++)
-    {
-        unsigned int i, decomposed_len = 1;/*wine_decompose(*src, dummy, 4);*/
-        dummy[0] = *src;
-        if (decomposed_len)
-        {
-            for (i = 0; i < decomposed_len; i++)
-            {
-                WCHAR wch = dummy[i];
-                unsigned int ce;
-
-                if ((flags & NORM_IGNORESYMBOLS) &&
-                    (get_char_type( CT_CTYPE1, wch ) & (C1_PUNCT | C1_SPACE)))
-                    continue;
-
-                if (flags & NORM_IGNORECASE) wch = casemap( nls_info.LowerCaseTable, wch );
-
-                ce = collation_table[collation_table[collation_table[wch >> 8] + ((wch >> 4) & 0x0f)] + (wch & 0xf)];
-                if (ce != (unsigned int)-1)
-                {
-                    if (ce >> 16) key_len[0] += 2;
-                    if ((ce >> 8) & 0xff) key_len[1]++;
-                    if ((ce >> 4) & 0x0f) key_len[2]++;
-                    if (ce & 1)
-                    {
-                        if (wch >> 8) key_len[3]++;
-                        key_len[3]++;
-                    }
-                }
-                else
-                {
-                    key_len[0] += 2;
-                    if (wch >> 8) key_len[0]++;
-                    if (wch & 0xff) key_len[0]++;
-		}
-            }
-        }
-    }
-
-    if (!dstlen) /* compute length */
-        /* 4 * '\1' + key length */
-        return key_len[0] + key_len[1] + key_len[2] + key_len[3] + 4;
-
-    if (dstlen < key_len[0] + key_len[1] + key_len[2] + key_len[3] + 4 + 1)
-        return 0; /* overflow */
-
-    src = src_save;
-    srclen = srclen_save;
-
-    key_ptr[0] = dst;
-    key_ptr[1] = key_ptr[0] + key_len[0] + 1;
-    key_ptr[2] = key_ptr[1] + key_len[1] + 1;
-    key_ptr[3] = key_ptr[2] + key_len[2] + 1;
-
-    for (; srclen; srclen--, src++)
-    {
-        unsigned int i, decomposed_len = 1;/*wine_decompose(*src, dummy, 4);*/
-        dummy[0] = *src;
-        if (decomposed_len)
-        {
-            for (i = 0; i < decomposed_len; i++)
-            {
-                WCHAR wch = dummy[i];
-                unsigned int ce;
-
-                if ((flags & NORM_IGNORESYMBOLS) &&
-                    (get_char_type( CT_CTYPE1, wch ) & (C1_PUNCT | C1_SPACE)))
-                    continue;
-
-                if (flags & NORM_IGNORECASE) wch = casemap( nls_info.LowerCaseTable, wch );
-
-                ce = collation_table[collation_table[collation_table[wch >> 8] + ((wch >> 4) & 0x0f)] + (wch & 0xf)];
-                if (ce != (unsigned int)-1)
-                {
-                    WCHAR key;
-                    if ((key = ce >> 16))
-                    {
-                        *key_ptr[0]++ = key >> 8;
-                        *key_ptr[0]++ = key & 0xff;
-                    }
-                    /* make key 1 start from 2 */
-                    if ((key = (ce >> 8) & 0xff)) *key_ptr[1]++ = key + 1;
-                    /* make key 2 start from 2 */
-                    if ((key = (ce >> 4) & 0x0f)) *key_ptr[2]++ = key + 1;
-                    /* key 3 is always a character code */
-                    if (ce & 1)
-                    {
-                        if (wch >> 8) *key_ptr[3]++ = wch >> 8;
-                        if (wch & 0xff) *key_ptr[3]++ = wch & 0xff;
-                    }
-                }
-                else
-                {
-                    *key_ptr[0]++ = 0xff;
-                    *key_ptr[0]++ = 0xfe;
-                    if (wch >> 8) *key_ptr[0]++ = wch >> 8;
-                    if (wch & 0xff) *key_ptr[0]++ = wch & 0xff;
-                }
-            }
-        }
-    }
-
-    *key_ptr[0] = 1;
-    *key_ptr[1] = 1;
-    *key_ptr[2] = 1;
-    *key_ptr[3]++ = 1;
-    *key_ptr[3] = 0;
-    return key_ptr[3] - dst;
-}
-
-
 /* compose a full-width katakana. return consumed source characters. */
 static int compose_katakana( const WCHAR *src, int srclen, WCHAR *dst )
 {
@@ -2609,6 +2488,280 @@ static int compare_weights(int flags, const WCHAR *str1, int len1,
     return len1 - len2;
 }
 
+enum sortkey_special_script
+{
+    SORTKEY_UNSORTABLE  = 0,
+    SORTKEY_DIACRITIC   = 1,
+    SORTKEY_JAPANESE    = 3,
+    SORTKEY_JAMO        = 4,
+    SORTKEY_CJK         = 5,
+    SORTKEY_PUNCTUATION = 6,
+    SORTKEY_SYMBOL_1    = 7,
+    SORTKEY_SYMBOL_2    = 8,
+    SORTKEY_SYMBOL_3    = 9,
+    SORTKEY_SYMBOL_4    = 10,
+    SORTKEY_SYMBOL_5    = 11,
+    SORTKEY_SYMBOL_6    = 12,
+};
+
+#define SORTKEY_MIN_WEIGHT 2
+
+struct character_info
+{
+    BYTE weight_primary;
+    BYTE script_member;
+    BYTE weight_diacritic;
+    BYTE weight_case;
+};
+
+struct sortkey_data
+{
+    BYTE *buffer;
+    int buffer_pos;
+    int buffer_len;
+};
+
+static void sortkey_get_char(struct character_info *info, WCHAR ch)
+{
+    DWORD value = sort.keys[ch];
+
+    info->weight_case = value >> 24;
+    info->weight_diacritic = (value >> 16) & 0xff;
+    info->script_member = (value >> 8) & 0xff;
+    info->weight_primary = value & 0xff;
+}
+
+
+static BOOL sortkey_is_PUA(BYTE script_member)
+{
+    return script_member >= 0xa9 && script_member <= 0xaf;
+}
+
+static void sortkey_add_weight(struct sortkey_data *data, BYTE value)
+{
+    if (data->buffer_pos < data->buffer_len)
+        data->buffer[data->buffer_pos] = value;
+    data->buffer_pos++;
+}
+
+static void sortkey_add_case_weight(struct sortkey_data *data, int flags, BYTE value)
+{
+    if (flags & NORM_IGNORECASE)
+        value &= ~0x18;
+    if (flags & NORM_IGNOREWIDTH)
+        value &= ~0x01;
+
+    sortkey_add_weight(data, value);
+}
+
+static void sortkey_add_diacritic_weight(struct sortkey_data *data, BYTE value, int *last_weighted_pos)
+{
+    sortkey_add_weight(data, value);
+    if (value > SORTKEY_MIN_WEIGHT)
+        *last_weighted_pos = data->buffer_pos;
+}
+
+static void sortkey_add_main_weights(struct sortkey_data *data, int flags, WCHAR c)
+{
+    struct character_info info;
+
+    sortkey_get_char(&info, c);
+
+    switch (info.script_member)
+    {
+    case SORTKEY_UNSORTABLE:
+    case SORTKEY_DIACRITIC:
+        break;
+
+    case SORTKEY_JAPANESE:
+        /* TODO */
+        break;
+
+    case SORTKEY_JAMO:
+        sortkey_add_weight(data, info.weight_primary);
+        sortkey_add_weight(data, info.weight_diacritic);
+        break;
+
+    case SORTKEY_CJK:
+        sortkey_add_weight(data, 253);
+        sortkey_add_weight(data, info.weight_primary);
+        sortkey_add_weight(data, info.weight_diacritic);
+        break;
+
+    case SORTKEY_PUNCTUATION:
+        /* TODO */
+        break;
+
+    case SORTKEY_SYMBOL_1:
+    case SORTKEY_SYMBOL_2:
+    case SORTKEY_SYMBOL_3:
+    case SORTKEY_SYMBOL_4:
+    case SORTKEY_SYMBOL_5:
+    case SORTKEY_SYMBOL_6:
+        if (flags & NORM_IGNORESYMBOLS)
+            break;
+
+        sortkey_add_weight(data, info.script_member);
+        sortkey_add_weight(data, info.weight_primary);
+        break;
+
+    default:
+        sortkey_add_weight(data, info.script_member);
+        sortkey_add_weight(data, info.weight_primary);
+        if (sortkey_is_PUA(info.script_member)) /* PUA characters are handled differently */
+            sortkey_add_weight(data, info.weight_diacritic);
+        break;
+    }
+}
+
+static void sortkey_add_diacritic_weights(struct sortkey_data *data, int flags, WCHAR c, int *last_weighted_pos, int diacritic_start_pos)
+{
+    struct character_info info;
+    int old_pos;
+
+    sortkey_get_char(&info, c);
+
+    switch (info.script_member)
+    {
+    case SORTKEY_UNSORTABLE:
+        break;
+
+    case SORTKEY_DIACRITIC:
+        old_pos = data->buffer_pos - 1;
+        /*
+         * Diacritic weights are added to the previous weight, if there is one,
+         * rather than being concatenated after it. This may result in overflow,
+         * which is not protected against. */
+
+        if (old_pos >= diacritic_start_pos)
+        {
+            if (old_pos < data->buffer_len)
+                data->buffer[old_pos] += info.weight_diacritic; /* Overflow can happen, that's okay */
+        }
+        else
+            sortkey_add_diacritic_weight(data, info.weight_diacritic, last_weighted_pos);
+        break;
+
+    case SORTKEY_JAPANESE:
+        /* TODO */
+        break;
+
+    case SORTKEY_JAMO:
+    case SORTKEY_CJK:
+        sortkey_add_diacritic_weight(data, SORTKEY_MIN_WEIGHT, last_weighted_pos);
+        break;
+
+    case SORTKEY_PUNCTUATION:
+        /* TODO */
+        break;
+
+    case SORTKEY_SYMBOL_1:
+    case SORTKEY_SYMBOL_2:
+    case SORTKEY_SYMBOL_3:
+    case SORTKEY_SYMBOL_4:
+    case SORTKEY_SYMBOL_5:
+    case SORTKEY_SYMBOL_6:
+        if (!(flags & NORM_IGNORESYMBOLS))
+            sortkey_add_diacritic_weight(data, info.weight_diacritic, last_weighted_pos);
+        break;
+
+    default:
+        if (!sortkey_is_PUA(info.script_member)) /* PUA characters are handled differently */
+            sortkey_add_diacritic_weight(data, info.weight_diacritic, last_weighted_pos);
+        break;
+    }
+}
+
+static void sortkey_add_case_weights(struct sortkey_data *data, int flags, WCHAR c)
+{
+    struct character_info info;
+
+    sortkey_get_char(&info, c);
+
+    switch (info.script_member)
+    {
+    case SORTKEY_UNSORTABLE:
+    case SORTKEY_DIACRITIC:
+        break;
+
+    case SORTKEY_JAPANESE:
+        /* TODO */
+        break;
+
+    case SORTKEY_CJK:
+        sortkey_add_case_weight(data, flags, SORTKEY_MIN_WEIGHT);
+        break;
+
+    case SORTKEY_PUNCTUATION:
+        /* TODO */
+        break;
+
+    case SORTKEY_SYMBOL_1:
+    case SORTKEY_SYMBOL_2:
+    case SORTKEY_SYMBOL_3:
+    case SORTKEY_SYMBOL_4:
+    case SORTKEY_SYMBOL_5:
+    case SORTKEY_SYMBOL_6:
+        if (!(flags & NORM_IGNORESYMBOLS))
+            sortkey_add_case_weight(data, flags, info.weight_case);
+        break;
+
+    case SORTKEY_JAMO:
+    default:
+        sortkey_add_case_weight(data, flags, info.weight_case);
+        break;
+    }
+}
+
+static int sortkey_generate(int flags, const WCHAR *locale, const WCHAR *str, int str_len, BYTE *buffer, int buffer_len)
+{
+    static const BYTE SORTKEY_SEPARATOR = 1;
+    static const BYTE SORTKEY_TERMINATOR = 0;
+    int i;
+    struct sortkey_data data;
+
+    data.buffer = buffer;
+    data.buffer_pos = 0;
+    data.buffer_len = buffer ? buffer_len : 0;
+
+    if (str_len == -1)
+        str_len = wcslen(str);
+
+    /* Main weights */
+    for (i = 0; i < str_len; i++)
+        sortkey_add_main_weights(&data, flags, str[i]);
+    sortkey_add_weight(&data, SORTKEY_SEPARATOR);
+
+    /* Diacritic weights */
+    if (!(flags & NORM_IGNORENONSPACE))
+    {
+        int diacritic_start_pos = data.buffer_pos;
+        int last_weighted_pos = data.buffer_pos;
+        for (i = 0; i < str_len; i++)
+            sortkey_add_diacritic_weights(&data, flags, str[i], &last_weighted_pos, diacritic_start_pos);
+        /* Remove all weights <= SORTKEY_MIN_WEIGHT from the end */
+        data.buffer_pos = last_weighted_pos;
+    }
+    sortkey_add_weight(&data, SORTKEY_SEPARATOR);
+
+    /* Case weights */
+    for (i = 0; i < str_len; i++)
+        sortkey_add_case_weights(&data, flags, str[i]);
+    sortkey_add_weight(&data, SORTKEY_SEPARATOR);
+
+    /* Extra weights */
+    /* TODO */
+    sortkey_add_weight(&data, SORTKEY_SEPARATOR);
+
+    /* Special weights */
+    /* TODO */
+    sortkey_add_weight(&data, SORTKEY_TERMINATOR);
+
+    if (data.buffer_pos <= buffer_len || !buffer)
+        return data.buffer_pos;
+
+    return 0;
+}
 
 static const struct geoinfo *get_geoinfo_ptr( GEOID geoid )
 {
@@ -5292,8 +5445,8 @@ INT WINAPI DECLSPEC_HOTPATCH LCMapStringEx( const WCHAR *locale, DWORD flags, co
         TRACE( "(%s,0x%08x,%s,%d,%p,%d)\n",
                debugstr_w(locale), flags, debugstr_wn(src, srclen), srclen, dst, dstlen );
 
-        if ((ret = get_sortkey( flags, src, srclen, (char *)dst, dstlen ))) ret++;
-        else SetLastError( ERROR_INSUFFICIENT_BUFFER );
+        if (!(ret = sortkey_generate(flags, L"", src, srclen, (BYTE *)dst, dstlen )))
+            SetLastError( ERROR_INSUFFICIENT_BUFFER );
         return ret;
     }
 
-- 
2.30.1

