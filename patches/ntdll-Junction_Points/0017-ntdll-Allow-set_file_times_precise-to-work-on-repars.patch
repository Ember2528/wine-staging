From 9d760a7c86cff579f870d78d0d5b4a6624b22324 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@wine-staging.com>
Date: Sun, 22 Nov 2020 22:37:33 -0700
Subject: [PATCH] ntdll: Allow set_file_times_precise to work on reparse
 points.

---
 configure.ac            |  3 ++-
 dlls/ntdll/tests/file.c |  8 ++++----
 dlls/ntdll/unix/file.c  | 22 ++++++++++++++++++----
 3 files changed, 24 insertions(+), 9 deletions(-)

diff --git a/configure.ac b/configure.ac
index 4b7d72063d8..0a15b7b92ff 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2224,7 +2224,8 @@ AC_CHECK_FUNCS(\
 	symlink \
 	sysinfo \
 	tcdrain \
-	thr_kill2
+	thr_kill2 \
+	utimensat
 )
 CFLAGS="$ac_save_CFLAGS"
 
diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
index 490d5160761..2449ee54799 100644
--- a/dlls/ntdll/tests/file.c
+++ b/dlls/ntdll/tests/file.c
@@ -5476,7 +5476,7 @@ static void test_reparse_points(void)
     memset(&old_attrib, 0x00, sizeof(old_attrib));
     old_attrib.LastAccessTime.QuadPart = 0x200deadcafebeef;
     dwret = NtSetInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
-    todo_wine ok(dwret == STATUS_SUCCESS, "Failed to set junction point folder's attributes (0x%x).\n", dwret);
+    ok(dwret == STATUS_SUCCESS, "Failed to set junction point folder's attributes (0x%x).\n", dwret);
     memset(&guid_buffer, 0x00, sizeof(guid_buffer));
     guid_buffer.ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;
     bret = DeviceIoControl(handle, FSCTL_DELETE_REPARSE_POINT, (LPVOID)&guid_buffer,
@@ -5485,7 +5485,7 @@ static void test_reparse_points(void)
     memset(&new_attrib, 0x00, sizeof(new_attrib));
     dwret = NtQueryInformationFile(handle, &iosb, &new_attrib, sizeof(new_attrib), FileBasicInformation);
     ok(dwret == STATUS_SUCCESS, "Failed to get junction point folder's attributes (0x%x).\n", dwret);
-    todo_wine ok(old_attrib.LastAccessTime.QuadPart == new_attrib.LastAccessTime.QuadPart,
+    ok(old_attrib.LastAccessTime.QuadPart == new_attrib.LastAccessTime.QuadPart,
        "Junction point folder's access time does not match.\n");
     CloseHandle(handle);
 
@@ -5647,7 +5647,7 @@ static void test_reparse_points(void)
     memset(&old_attrib, 0x00, sizeof(old_attrib));
     old_attrib.LastAccessTime.QuadPart = 0x200deadcafebeef;
     dwret = NtSetInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
-    todo_wine ok(dwret == STATUS_SUCCESS, "Failed to set symlink folder's attributes (0x%x).\n", dwret);
+    ok(dwret == STATUS_SUCCESS, "Failed to set symlink folder's attributes (0x%x).\n", dwret);
     memset(&guid_buffer, 0x00, sizeof(guid_buffer));
     guid_buffer.ReparseTag = IO_REPARSE_TAG_SYMLINK;
     bret = DeviceIoControl(handle, FSCTL_DELETE_REPARSE_POINT, (LPVOID)&guid_buffer,
@@ -5656,7 +5656,7 @@ static void test_reparse_points(void)
     memset(&new_attrib, 0x00, sizeof(new_attrib));
     dwret = NtQueryInformationFile(handle, &iosb, &new_attrib, sizeof(new_attrib), FileBasicInformation);
     ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
-    todo_wine ok(old_attrib.LastAccessTime.QuadPart == new_attrib.LastAccessTime.QuadPart,
+    ok(old_attrib.LastAccessTime.QuadPart == new_attrib.LastAccessTime.QuadPart,
        "Symlink folder's access time does not match.\n");
     CloseHandle(handle);
 
diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index 2ee9288f500..2f0ec520288 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -1728,6 +1728,14 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
 }
 
 
+#if defined(__ANDROID__) && !defined(HAVE_UTIMENSAT)
+static int utimensat( int fd, const char *name, const struct timespec spec[2], int flags )
+{
+    return syscall( __NR_utimensat, fd, name, spec, flags );
+}
+#define HAVE_UTIMENSAT
+#endif  /* __ANDROID__ */
+
 #if defined(__ANDROID__) && !defined(HAVE_FUTIMENS)
 static int futimens( int fd, const struct timespec spec[2] )
 {
@@ -1743,7 +1751,7 @@ static int futimens( int fd, const struct timespec spec[2] )
 static BOOL set_file_times_precise( int fd, const LARGE_INTEGER *mtime,
                                     const LARGE_INTEGER *atime, NTSTATUS *status )
 {
-#ifdef HAVE_FUTIMENS
+#if defined(HAVE_FUTIMENS) || defined(HAVE_UTIMENSAT)
     struct timespec tv[2];
 
     tv[0].tv_sec = tv[1].tv_sec = 0;
@@ -1759,10 +1767,16 @@ static BOOL set_file_times_precise( int fd, const LARGE_INTEGER *mtime,
         tv[1].tv_nsec = (mtime->QuadPart % 10000000) * 100;
     }
 #ifdef __APPLE__
-    if (!&futimens) return FALSE;
+    if (!&utimensat || !&futimens) return FALSE;
 #endif
-    if (futimens( fd, tv ) == -1) *status = errno_to_status( errno );
-    else *status = STATUS_SUCCESS;
+#if defined(HAVE_UTIMENSAT)
+    /* futimens does not work on O_PATH|O_NOFOLLOW (O_SYMLINK) file descriptors, so if fd is for a
+     * symlink then use utimensat with an empty path (.) and do not follow the link. */
+    if (utimensat(fd, ".", tv, AT_SYMLINK_NOFOLLOW) == 0) *status = STATUS_SUCCESS;
+    else
+#endif
+    if (futimens(fd, tv) == 0) *status = STATUS_SUCCESS;
+    else *status = errno_to_status( errno );
     return TRUE;
 #else
     return FALSE;
-- 
2.30.2

