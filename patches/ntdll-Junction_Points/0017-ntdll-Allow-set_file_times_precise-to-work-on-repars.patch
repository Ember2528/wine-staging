From 07a914c25e72ddb67226b5099c4fda9dc9f77f22 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@wine-staging.com>
Date: Sun, 22 Nov 2020 22:37:33 -0700
Subject: ntdll: Allow set_file_times_precise to work on reparse points.

---
 configure.ac           |  3 ++-
 dlls/ntdll/unix/file.c | 22 ++++++++++++++++++----
 2 files changed, 20 insertions(+), 5 deletions(-)

diff --git a/configure.ac b/configure.ac
index a944591343d..efb4035295a 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2224,7 +2224,8 @@ AC_CHECK_FUNCS(\
 	sigprocmask \
 	symlink \
 	tcdrain \
-	thr_kill2
+	thr_kill2 \
+	utimensat
 )
 CFLAGS="$ac_save_CFLAGS"
 
diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index 8d42008a596..5375b94e02a 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -1738,6 +1738,14 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
 }
 
 
+#if defined(__ANDROID__) && !defined(HAVE_UTIMENSAT)
+static int utimensat( int fd, const char *name, const struct timespec spec[2], int flags )
+{
+    return syscall( __NR_utimensat, fd, name, spec, flags );
+}
+#define HAVE_UTIMENSAT
+#endif  /* __ANDROID__ */
+
 #if defined(__ANDROID__) && !defined(HAVE_FUTIMENS)
 static int futimens( int fd, const struct timespec spec[2] )
 {
@@ -1753,7 +1761,7 @@ static int futimens( int fd, const struct timespec spec[2] )
 static BOOL set_file_times_precise( int fd, const LARGE_INTEGER *mtime,
                                     const LARGE_INTEGER *atime, NTSTATUS *status )
 {
-#ifdef HAVE_FUTIMENS
+#if defined(HAVE_FUTIMENS) || defined(HAVE_UTIMENSAT)
     struct timespec tv[2];
 
     tv[0].tv_sec = tv[1].tv_sec = 0;
@@ -1769,10 +1777,16 @@ static BOOL set_file_times_precise( int fd, const LARGE_INTEGER *mtime,
         tv[1].tv_nsec = (mtime->QuadPart % 10000000) * 100;
     }
 #ifdef __APPLE__
-    if (!&futimens) return FALSE;
+    if (!&utimensat || !&futimens) return FALSE;
+#endif
+#if defined(HAVE_UTIMENSAT)
+    /* futimens does not work on O_PATH|O_NOFOLLOW (O_SYMLINK) file descriptors, so if fd is for a
+     * symlink then use utimensat with an empty path (.) and do not follow the link. */
+    if (utimensat(fd, ".", tv, AT_SYMLINK_NOFOLLOW) == 0) *status = STATUS_SUCCESS;
+    else
 #endif
-    if (futimens( fd, tv ) == -1) *status = errno_to_status( errno );
-    else *status = STATUS_SUCCESS;
+    if (futimens(fd, tv) == 0) *status = STATUS_SUCCESS;
+    else *status = errno_to_status( errno );
     return TRUE;
 #else
     return FALSE;
-- 
2.17.1

