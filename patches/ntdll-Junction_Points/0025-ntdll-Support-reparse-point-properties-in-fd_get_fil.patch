From e52191dc584a752128f9c945e5527f6a5b7de369 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@wine-staging.com>
Date: Wed, 25 Nov 2020 09:05:51 -0700
Subject: ntdll: Support reparse point properties in fd_get_file_info.

Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
---
 dlls/ntdll/tests/file.c |  2 +-
 dlls/ntdll/unix/file.c  | 26 +++++++++++++++++++-------
 2 files changed, 20 insertions(+), 8 deletions(-)

diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
index cb9a9506aba..cde3b86ade2 100644
--- a/dlls/ntdll/tests/file.c
+++ b/dlls/ntdll/tests/file.c
@@ -5579,7 +5579,7 @@ static void test_reparse_points(void)
     handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
                          FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
     ok(handle != INVALID_HANDLE_VALUE, "Failed to open symlink file.\n");
-    todo_wine ok(GetFileSize(handle, NULL) == 0, "symlink size is not zero\n");
+    ok(GetFileSize(handle, NULL) == 0, "symlink size is not zero\n");
     bret = ReadFile(handle, &buf, sizeof(buf), &dwLen, NULL);
     ok(bret, "Failed to read data from the symlink.\n");
     ok(dwLen == 0, "Length of symlink data is not zero.\n");
diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index f7ff9f4b5ed..75194023e69 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -1599,7 +1599,7 @@ static inline int get_file_xattr( char *hexattr, int attrlen )
     return 0;
 }
 
-NTSTATUS get_symlink_properties(const char *unix_src, char *unix_dest, int *unix_dest_len,
+NTSTATUS get_symlink_properties(int fd, const char *unix_src, char *unix_dest, int *unix_dest_len,
                                 DWORD *tag, ULONG *flags, BOOL *is_dir);
 
 /* fetch the attributes of a file */
@@ -1633,10 +1633,22 @@ static int fd_get_file_info( int fd, unsigned int options, struct stat *st, ULON
     *attr = 0;
     ret = fstat( fd, st );
     if (ret == -1) return ret;
-    *attr |= get_file_attributes( st );
     /* consider mount points to be reparse points (IO_REPARSE_TAG_MOUNT_POINT) */
     if ((options & FILE_OPEN_REPARSE_POINT) && fd_is_mount_point( fd, st ))
         *attr |= FILE_ATTRIBUTE_REPARSE_POINT;
+    if (S_ISLNK( st->st_mode ))
+    {
+        BOOL is_dir;
+
+        /* symbolic links (either junction points or NT symlinks) are "reparse points" */
+        *attr |= FILE_ATTRIBUTE_REPARSE_POINT;
+        /* symbolic links always report size 0 */
+        st->st_size = 0;
+        if (get_symlink_properties( fd, "", NULL, NULL, NULL, NULL, &is_dir ) == STATUS_SUCCESS)
+            st->st_mode = (st->st_mode & ~S_IFMT) | (is_dir ? S_IFDIR : S_IFREG);
+    }
+    *attr |= get_file_attributes( st );
+
     return ret;
 }
 
@@ -1695,7 +1707,7 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
         /* symbolic links (either junction points or NT symlinks) are "reparse points" */
         *attr |= FILE_ATTRIBUTE_REPARSE_POINT;
         /* whether a reparse point is a file or a directory is stored inside the link target */
-        if (get_symlink_properties( path, NULL, NULL, NULL, NULL, &is_dir ) == STATUS_SUCCESS)
+        if (get_symlink_properties( AT_FDCWD, path, NULL, NULL, NULL, NULL, &is_dir ) == STATUS_SUCCESS)
             st->st_mode = (st->st_mode & ~S_IFMT) | (is_dir ? S_IFDIR : S_IFREG);
     }
     else if (S_ISDIR( st->st_mode ) && (parent_path = malloc( strlen(path) + 4 )))
@@ -6231,7 +6243,7 @@ cleanup:
 }
 
 
-NTSTATUS get_symlink_properties(const char *unix_src, char *unix_dest, int *unix_dest_len,
+NTSTATUS get_symlink_properties(int fd, const char *unix_src, char *unix_dest, int *unix_dest_len,
                                 DWORD *tag, ULONG *flags, BOOL *is_dir)
 {
     int len = MAX_PATH;
@@ -6247,7 +6259,7 @@ NTSTATUS get_symlink_properties(const char *unix_src, char *unix_dest, int *unix
         tmp = malloc( len );
     else
         tmp = unix_dest;
-    if ((ret = readlink( unix_src, tmp, len )) < 0)
+    if ((ret = readlinkat( fd, unix_src, tmp, len )) < 0)
     {
         status = errno_to_status( errno );
         goto cleanup;
@@ -6339,8 +6351,8 @@ NTSTATUS get_reparse_point(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG *si
     if ((status = server_get_unix_name( handle, &unix_src, TRUE )))
         goto cleanup;
 
-    if ((status = get_symlink_properties( unix_src, unix_dest, &unix_dest_len, &buffer->ReparseTag,
-                                          &flags, NULL )))
+    if ((status = get_symlink_properties( AT_FDCWD, unix_src, unix_dest, &unix_dest_len,
+                                          &buffer->ReparseTag, &flags, NULL )))
         goto cleanup;
 
     /* convert the relative path into an absolute path */
-- 
2.17.1

