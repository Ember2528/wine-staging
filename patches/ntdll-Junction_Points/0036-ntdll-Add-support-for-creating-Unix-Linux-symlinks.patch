From 96a9115e57cee4a11675d1fff5125155b6b213fb Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@wine-staging.com>
Date: Mon, 3 May 2021 09:28:08 -0600
Subject: ntdll: Add support for creating Unix/Linux symlinks.

Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
---
 dlls/ntdll/tests/file.c | 43 +++++++++++++++++++++++++++++++++++++++++
 dlls/ntdll/unix/file.c  | 30 ++++++++++++++++++++--------
 2 files changed, 65 insertions(+), 8 deletions(-)

diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
index 18887895e40..bff3b18ce83 100644
--- a/dlls/ntdll/tests/file.c
+++ b/dlls/ntdll/tests/file.c
@@ -5390,7 +5390,9 @@ static void test_reparse_points(void)
     REPARSE_DATA_BUFFER *buffer = NULL;
     DWORD dwret, dwLen, dwFlags, err;
     WIN32_FILE_ATTRIBUTE_DATA fad;
+    UCHAR *unix_dest;
     WCHAR buf[] = {0,0,0,0};
+    char name[] = "target";
     HANDLE handle, token;
     IO_STATUS_BLOCK iosb;
     UNICODE_STRING nameW;
@@ -5736,6 +5738,47 @@ static void test_reparse_points(void)
                                                      wine_dbgstr_w(dest), wine_dbgstr_w(&targetW[1]));
     CloseHandle(handle);
 
+    /* Create a Unix/Linux symlink */
+    HeapFree(GetProcessHeap(), 0, buffer);
+    RemoveDirectoryW(reparse_path);
+    bret = CreateDirectoryW(reparse_path, NULL);
+    handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
+                         FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
+    if (handle == INVALID_HANDLE_VALUE)
+    {
+        win_skip("Failed to open symlink directory handle (0x%x).\n", GetLastError());
+        goto cleanup;
+    }
+    dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
+    ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
+    path_len = strlen(name);
+    buffer_len = offsetof(REPARSE_DATA_BUFFER, LinuxSymbolicLinkReparseBuffer.PathBuffer[path_len]);
+    buffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_len);
+    buffer->ReparseTag = IO_REPARSE_TAG_LX_SYMLINK;
+    buffer->ReparseDataLength = sizeof(ULONG) + path_len;
+    memcpy(buffer->LinuxSymbolicLinkReparseBuffer.PathBuffer, name, path_len);
+    bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
+    ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
+
+    /* Read back the Unix/Linux symlink */
+    HeapFree(GetProcessHeap(), 0, buffer);
+    handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
+                         FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
+    if (handle == INVALID_HANDLE_VALUE)
+    buffer_len = sizeof(*buffer) + MAX_PATH*sizeof(WCHAR);
+    buffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_len);
+    bret = DeviceIoControl(handle, FSCTL_GET_REPARSE_POINT, NULL, 0, (LPVOID)buffer, buffer_len, &dwret, 0);
+    ok(bret, "Failed to read symlink!\n");
+    string_len = buffer->ReparseDataLength - sizeof(ULONG);
+    unix_dest = &buffer->LinuxSymbolicLinkReparseBuffer.PathBuffer[0];
+    ok((memcmp(unix_dest, name, string_len) == 0), "Symlink destination does not match ('%s' != '%s')!\n",
+                                                   unix_dest, name);
+    total_len = FIELD_OFFSET(typeof(*buffer), LinuxSymbolicLinkReparseBuffer.PathBuffer[path_len])
+                - FIELD_OFFSET(typeof(*buffer), GenericReparseBuffer);
+    ok(buffer->ReparseDataLength == total_len, "ReparseDataLength has unexpected value (%d != %d)\n",
+                                               buffer->ReparseDataLength, total_len);
+    CloseHandle(handle);
+
 cleanup:
     /* Cleanup */
     pRtlFreeUnicodeString(&nameW);
diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index 752561931ab..0c2117ca801 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -6031,18 +6031,18 @@ NTSTATUS create_reparse_point(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
 {
     BOOL src_allocated = FALSE, path_allocated = FALSE, dest_allocated = FALSE;
     BOOL nt_dest_allocated = FALSE, tempdir_created = FALSE;
-    char *unix_src, *unix_dest, *unix_path = NULL;
+    char *unix_src, *unix_dest = NULL, *unix_path = NULL;
     char tmpdir[PATH_MAX], tmplink[PATH_MAX], *d;
     SIZE_T unix_dest_len = PATH_MAX;
     char magic_dest[PATH_MAX];
     int dest_fd, needs_close;
+    int dest_len = 0, offset;
     int relative_offset = 0;
     UNICODE_STRING nt_dest;
-    int dest_len, offset;
     BOOL is_dir = TRUE;
+    WCHAR *dest = NULL;
     NTSTATUS status;
     struct stat st;
-    WCHAR *dest;
     ULONG flags;
     int i;
 
@@ -6060,6 +6060,12 @@ NTSTATUS create_reparse_point(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
         dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[offset];
         flags = buffer->SymbolicLinkReparseBuffer.Flags;
         break;
+    case IO_REPARSE_TAG_LX_SYMLINK:
+        offset = 0;
+        flags = 0;
+        unix_dest_len = buffer->ReparseDataLength - sizeof(ULONG);
+        unix_dest = (char *) &buffer->LinuxSymbolicLinkReparseBuffer.PathBuffer[offset];
+        break;
     default:
         FIXME("stub: FSCTL_SET_REPARSE_POINT(%x)\n", buffer->ReparseTag);
         return STATUS_NOT_IMPLEMENTED;
@@ -6071,6 +6077,9 @@ NTSTATUS create_reparse_point(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
     if ((status = server_get_unix_name( handle, &unix_src, FALSE )))
         goto cleanup;
     src_allocated = TRUE;
+
+    if (unix_dest) goto have_dest;
+
     if (flags == SYMLINK_FLAG_RELATIVE)
     {
         SIZE_T nt_path_len = PATH_MAX, unix_path_len = PATH_MAX;
@@ -6146,6 +6155,8 @@ NTSTATUS create_reparse_point(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
     if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
         goto cleanup;
     dest_allocated = TRUE;
+
+have_dest:
     /* check that the source and destination paths are the same up to the relative path */
     if (flags == SYMLINK_FLAG_RELATIVE)
     {
@@ -6161,14 +6172,17 @@ NTSTATUS create_reparse_point(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
 
     /* Encode the reparse tag into the symlink */
     strcpy( magic_dest, "" );
-    if (flags == SYMLINK_FLAG_RELATIVE)
-        strcat( magic_dest, "." );
-    strcat( magic_dest, "/" );
-    for (i = 0; i < sizeof(ULONG)*8; i++)
+    if (buffer->ReparseTag != IO_REPARSE_TAG_LX_SYMLINK)
     {
-        if ((buffer->ReparseTag >> i) & 1)
+        if (flags == SYMLINK_FLAG_RELATIVE)
             strcat( magic_dest, "." );
         strcat( magic_dest, "/" );
+        for (i = 0; i < sizeof(ULONG)*8; i++)
+        {
+            if ((buffer->ReparseTag >> i) & 1)
+                strcat( magic_dest, "." );
+            strcat( magic_dest, "/" );
+        }
     }
     /* Encode the type (file or directory) if NT symlink */
     if (buffer->ReparseTag == IO_REPARSE_TAG_SYMLINK)
-- 
2.17.1

