From 7c1e6d56e5faa72f8adff738fc2f2e774ee1b754 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Thu, 11 Apr 2019 12:31:16 -0600
Subject: ntdll: Add support for reading relative symlinks.

Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
---
 dlls/ntdll/tests/file.c | 15 ++++++++++++++-
 dlls/ntdll/unix/file.c  | 38 +++++++++++++++++++++++++++++++++-----
 2 files changed, 47 insertions(+), 6 deletions(-)

diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
index 1ace7f76c1f..2f0903fe7f1 100644
--- a/dlls/ntdll/tests/file.c
+++ b/dlls/ntdll/tests/file.c
@@ -5625,9 +5625,22 @@ static void test_reparse_points(void)
     ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
     buffer_len = build_reparse_buffer(&targetW[1], IO_REPARSE_TAG_SYMLINK, SYMLINK_FLAG_RELATIVE, &buffer);
     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
-    CloseHandle(handle);
     ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
 
+    /* Read back the relative symlink */
+    HeapFree(GetProcessHeap(), 0, buffer);
+    buffer_len = sizeof(*buffer) + MAX_PATH*sizeof(WCHAR);
+    buffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_len);
+    bret = DeviceIoControl(handle, FSCTL_GET_REPARSE_POINT, NULL, 0, (LPVOID)buffer, buffer_len, &dwret, 0);
+    ok(bret, "Failed to read relative symlink!\n");
+    string_len = buffer->SymbolicLinkReparseBuffer.SubstituteNameLength;
+    ok(string_len != lstrlenW(&targetW[1]), "Symlink destination length does not match ('%d' != '%d')!\n",
+                                            string_len, lstrlenW(&targetW[1]));
+    dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[buffer->SymbolicLinkReparseBuffer.SubstituteNameOffset/sizeof(WCHAR)];
+    ok((memcmp(dest, &targetW[1], string_len) == 0), "Symlink destination does not match ('%s' != '%s')!\n",
+                                                     wine_dbgstr_w(dest), wine_dbgstr_w(&targetW[1]));
+    CloseHandle(handle);
+
 cleanup:
     /* Cleanup */
     pRtlFreeUnicodeString(&nameW);
diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index 35ae5ab854a..bf63985f777 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -6221,6 +6221,11 @@ NTSTATUS get_reparse_point(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG *si
 
     /* Decode the reparse tag from the symlink */
     p = unix_dest;
+    if (*p == '.')
+    {
+        flags = SYMLINK_FLAG_RELATIVE;
+        p++;
+    }
     if (*p++ != '/')
     {
         status = STATUS_NOT_IMPLEMENTED;
@@ -6258,24 +6263,47 @@ NTSTATUS get_reparse_point(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG *si
     memmove(unix_dest, p, unix_dest_len);
     unix_dest[unix_dest_len] = 0;
 
-    for (;;)
+    /* convert the relative path into an absolute path */
+    if (flags == SYMLINK_FLAG_RELATIVE)
     {
+        int i;
+
+        nt_dest_len = unix_dest_len;
         nt_dest = malloc( nt_dest_len * sizeof(WCHAR) );
         if (!nt_dest)
         {
             status = STATUS_NO_MEMORY;
             goto cleanup;
         }
-        status = wine_unix_to_nt_file_name( unix_dest, nt_dest, &nt_dest_len );
-        if (status != STATUS_BUFFER_TOO_SMALL) break;
-        free( nt_dest );
+        /* wine_unix_to_nt_file_name does not work on relative paths, so convert manually */
+        for (i = 0; i < unix_dest_len; i++)
+        {
+            if (unix_dest[i] == '/') unix_dest[i] = '\\';
+        }
+        ascii_to_unicode( nt_dest, unix_dest, unix_dest_len );
+    }
+    else
+    {
+        /* resolve the NT path */
+        for (;;)
+        {
+            nt_dest = malloc( nt_dest_len * sizeof(WCHAR) );
+            if (!nt_dest)
+            {
+                status = STATUS_NO_MEMORY;
+                goto cleanup;
+            }
+            status = wine_unix_to_nt_file_name( unix_dest, nt_dest, &nt_dest_len );
+            if (status != STATUS_BUFFER_TOO_SMALL) break;
+            free( nt_dest );
+        }
     }
     dest_allocated = TRUE;
     if (status != STATUS_SUCCESS)
         goto cleanup;
     nt_dest_len *= sizeof(WCHAR);
 
-    prefix_len = strlen("\\??\\");
+    prefix_len = (flags == SYMLINK_FLAG_RELATIVE) ? 0 : strlen("\\??\\");
     switch(buffer->ReparseTag)
     {
     case IO_REPARSE_TAG_MOUNT_POINT:
-- 
2.17.1

