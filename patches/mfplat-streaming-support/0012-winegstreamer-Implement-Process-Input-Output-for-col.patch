From 126c7b1289899ea86527acb20f3bfc296a4dde2f Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Thu, 3 Dec 2020 15:22:20 -0500
Subject: [PATCH] winegstreamer: Implement ::Process(Input/Output) for color
 conversion transform.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/colorconvert.c | 172 ++++++++++++++++++++++++++++--
 1 file changed, 165 insertions(+), 7 deletions(-)

diff --git a/dlls/winegstreamer/colorconvert.c b/dlls/winegstreamer/colorconvert.c
index c2665cbdacb..4aa563ab0d9 100644
--- a/dlls/winegstreamer/colorconvert.c
+++ b/dlls/winegstreamer/colorconvert.c
@@ -55,6 +55,8 @@ struct color_converter
     IMFMediaType *input_type;
     IMFMediaType *output_type;
     CRITICAL_SECTION cs;
+    BOOL inflight;
+    GstElement *container, *appsrc, *appsink;
 };
 
 static struct color_converter *impl_color_converter_from_IMFTransform(IMFTransform *iface)
@@ -100,6 +102,7 @@ static ULONG WINAPI color_converter_Release(IMFTransform *iface)
     {
         transform->cs.DebugInfo->Spare[0] = 0;
         DeleteCriticalSection(&transform->cs);
+        gst_object_unref(transform->container);
         heap_free(transform);
     }
 
@@ -281,6 +284,9 @@ static HRESULT WINAPI color_converter_SetInputType(IMFTransform *iface, DWORD id
 
         EnterCriticalSection(&converter->cs);
 
+        converter->inflight = FALSE;
+        gst_element_set_state(converter->container, GST_STATE_READY);
+
         if (converter->input_type)
         {
             IMFMediaType_Release(converter->input_type);
@@ -312,14 +318,17 @@ static HRESULT WINAPI color_converter_SetInputType(IMFTransform *iface, DWORD id
     if (!(input_caps = caps_from_mf_media_type(type)))
         return MF_E_INVALIDTYPE;
 
-    gst_caps_unref(input_caps);
-
     if (flags & MFT_SET_TYPE_TEST_ONLY)
+    {
+        gst_caps_unref(input_caps);
         return S_OK;
+    }
 
     EnterCriticalSection(&converter->cs);
 
     hr = S_OK;
+    converter->inflight = FALSE;
+    gst_element_set_state(converter->container, GST_STATE_READY);
 
     if (!converter->input_type)
         hr = MFCreateMediaType(&converter->input_type);
@@ -327,12 +336,18 @@ static HRESULT WINAPI color_converter_SetInputType(IMFTransform *iface, DWORD id
     if (SUCCEEDED(hr))
         hr = IMFMediaType_CopyAllItems(type, (IMFAttributes *) converter->input_type);
 
+    g_object_set(converter->appsrc, "caps", input_caps, NULL);
+    gst_caps_unref(input_caps);
+
     if (FAILED(hr))
     {
         IMFMediaType_Release(converter->input_type);
         converter->input_type = NULL;
     }
 
+    if (converter->input_type && converter->output_type)
+        gst_element_set_state(converter->container, GST_STATE_PLAYING);
+
     LeaveCriticalSection(&converter->cs);
 
     return hr;
@@ -359,6 +374,9 @@ static HRESULT WINAPI color_converter_SetOutputType(IMFTransform *iface, DWORD i
 
         EnterCriticalSection(&converter->cs);
 
+        converter->inflight = FALSE;
+        gst_element_set_state(converter->container, GST_STATE_READY);
+
         if (converter->output_type)
         {
             IMFMediaType_Release(converter->output_type);
@@ -390,14 +408,17 @@ static HRESULT WINAPI color_converter_SetOutputType(IMFTransform *iface, DWORD i
     if (!(output_caps = caps_from_mf_media_type(type)))
         return MF_E_INVALIDTYPE;
 
-    gst_caps_unref(output_caps);
-
     if (flags & MFT_SET_TYPE_TEST_ONLY)
+    {
+        gst_caps_unref(output_caps);
         return S_OK;
+    }
 
     EnterCriticalSection(&converter->cs);
 
     hr = S_OK;
+    converter->inflight = FALSE;
+    gst_element_set_state(converter->container, GST_STATE_READY);
 
     if (!converter->output_type)
         hr = MFCreateMediaType(&converter->output_type);
@@ -405,12 +426,18 @@ static HRESULT WINAPI color_converter_SetOutputType(IMFTransform *iface, DWORD i
     if (SUCCEEDED(hr))
         hr = IMFMediaType_CopyAllItems(type, (IMFAttributes *) converter->output_type);
 
+    g_object_set(converter->appsink, "caps", output_caps, NULL);
+    gst_caps_unref(output_caps);
+
     if (FAILED(hr))
     {
         IMFMediaType_Release(converter->output_type);
         converter->output_type = NULL;
     }
 
+    if (converter->input_type && converter->output_type)
+        gst_element_set_state(converter->container, GST_STATE_PLAYING);
+
     LeaveCriticalSection(&converter->cs);
 
     return hr;
@@ -467,15 +494,102 @@ static HRESULT WINAPI color_converter_ProcessMessage(IMFTransform *iface, MFT_ME
 
 static HRESULT WINAPI color_converter_ProcessInput(IMFTransform *iface, DWORD id, IMFSample *sample, DWORD flags)
 {
-    FIXME("%p, %u, %p, %#x.\n", iface, id, sample, flags);
+    GstBuffer *gst_buffer;
+    int ret;
 
-    return E_NOTIMPL;
+    struct color_converter *converter = impl_color_converter_from_IMFTransform(iface);
+
+    TRACE("%p, %u, %p, %#x.\n", iface, id, sample, flags);
+
+    if (flags)
+        WARN("Unsupported flags %#x\n", flags);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    EnterCriticalSection(&converter->cs);
+
+    if (!converter->input_type || !converter->output_type)
+    {
+        LeaveCriticalSection(&converter->cs);
+        return MF_E_TRANSFORM_TYPE_NOT_SET;
+    }
+
+    if (converter->inflight)
+    {
+        LeaveCriticalSection(&converter->cs);
+        return MF_E_NOTACCEPTING;
+    }
+
+    if (!(gst_buffer = gst_buffer_from_mf_sample(sample)))
+    {
+        LeaveCriticalSection(&converter->cs);
+        return E_FAIL;
+    }
+
+    g_signal_emit_by_name(converter->appsrc, "push-buffer", gst_buffer, &ret);
+    gst_buffer_unref(gst_buffer);
+    if (ret != GST_FLOW_OK)
+    {
+        ERR("Couldn't push buffer, (%s)\n", gst_flow_get_name(ret));
+        LeaveCriticalSection(&converter->cs);
+        return E_FAIL;
+    }
+
+    converter->inflight = TRUE;
+    LeaveCriticalSection(&converter->cs);
+
+    return S_OK;
 }
 
 static HRESULT WINAPI color_converter_ProcessOutput(IMFTransform *iface, DWORD flags, DWORD count,
         MFT_OUTPUT_DATA_BUFFER *samples, DWORD *status)
 {
-    FIXME("%p, %#x, %u, %p, %p.\n", iface, flags, count, samples, status);
+    GstSample *sample;
+
+    struct color_converter *converter = impl_color_converter_from_IMFTransform(iface);
+
+    TRACE("%p, %#x, %u, %p, %p.\n", iface, flags, count, samples, status);
+
+    if (flags)
+        WARN("Unsupported flags %#x\n", flags);
+
+    if (!count)
+        return S_OK;
+
+    if (count != 1)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (samples[0].dwStreamID != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    EnterCriticalSection(&converter->cs);
+
+    if (!converter->input_type || !converter->output_type)
+    {
+        LeaveCriticalSection(&converter->cs);
+        return MF_E_TRANSFORM_TYPE_NOT_SET;
+    }
+
+    if (!converter->inflight)
+    {
+        LeaveCriticalSection(&converter->cs);
+        return MF_E_TRANSFORM_NEED_MORE_INPUT;
+    }
+
+    g_signal_emit_by_name(converter->appsink, "pull-sample", &sample);
+
+    converter->inflight = FALSE;
+
+    samples[0].pSample = mf_sample_from_gst_buffer(gst_sample_get_buffer(sample));
+    gst_sample_unref(sample);
+    samples[0].dwStatus = S_OK;
+    samples[0].pEvents = NULL;
+    *status = 0;
+
+    LeaveCriticalSection(&converter->cs);
+
+    return S_OK;
 
     return E_NOTIMPL;
 }
@@ -513,6 +627,7 @@ static const IMFTransformVtbl color_converter_vtbl =
 HRESULT color_converter_create(REFIID riid, void **ret)
 {
     struct color_converter *object;
+    GstElement *videoconvert;
 
     TRACE("%s %p\n", debugstr_guid(riid), ret);
 
@@ -525,6 +640,49 @@ HRESULT color_converter_create(REFIID riid, void **ret)
     InitializeCriticalSection(&object->cs);
     object->cs.DebugInfo->Spare[0] = (DWORD_PTR)(__FILE__ ": color_converter_lock");
 
+    object->container = gst_bin_new(NULL);
+
+    if (!(object->appsrc = gst_element_factory_make("appsrc", NULL)))
+    {
+        ERR("Failed to create appsrc, are %u-bit Gstreamer \"base\" plugins installed?\n",
+                8 * (int)sizeof(void *));
+        IMFTransform_Release(&object->IMFTransform_iface);
+        return E_FAIL;
+    }
+    gst_bin_add(GST_BIN(object->container), object->appsrc);
+
+    if (!(videoconvert = gst_element_factory_make("videoconvert", NULL)))
+    {
+        ERR("Failed to create videoconvert, are %u-bit Gstreamer \"base\" plugins installed?\n",
+                8 * (int)sizeof(void *));
+        IMFTransform_Release(&object->IMFTransform_iface);
+        return E_FAIL;
+    }
+    gst_bin_add(GST_BIN(object->container), videoconvert);
+
+    if (!(object->appsink = gst_element_factory_make("appsink", NULL)))
+    {
+        ERR("Failed to create appsink, are %u-bit Gstreamer \"base\" plugins installed?\n",
+                8 * (int)sizeof(void *));
+        IMFTransform_Release(&object->IMFTransform_iface);
+        return E_FAIL;
+    }
+    gst_bin_add(GST_BIN(object->container), object->appsink);
+
+    if (!gst_element_link(object->appsrc, videoconvert))
+    {
+        ERR("Failed to link appsrc to videoconvert\n");
+        IMFTransform_Release(&object->IMFTransform_iface);
+        return E_FAIL;
+    }
+
+    if (!gst_element_link(videoconvert, object->appsink))
+    {
+        ERR("Failed to link videoconvert to appsink\n");
+        IMFTransform_Release(&object->IMFTransform_iface);
+        return E_FAIL;
+    }
+
     *ret = &object->IMFTransform_iface;
     return S_OK;
 }
-- 
2.29.2

