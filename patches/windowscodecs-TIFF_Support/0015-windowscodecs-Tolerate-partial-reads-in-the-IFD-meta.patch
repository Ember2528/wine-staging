From 8348f9700da32b1d21f7fab70697ce65414ade4b Mon Sep 17 00:00:00 2001
From: Dmitry Timoshkov <dmitry@baikal.ru>
Date: Fri, 16 Dec 2016 18:08:51 +0800
Subject: [PATCH] windowscodecs: Tolerate partial reads in the IFD metadata
 loader.

---
 dlls/windowscodecs/metadatahandler.c | 51 ++++++++++++----------------
 1 file changed, 22 insertions(+), 29 deletions(-)

diff --git a/dlls/windowscodecs/metadatahandler.c b/dlls/windowscodecs/metadatahandler.c
index 128514f6a31..847a097d479 100644
--- a/dlls/windowscodecs/metadatahandler.c
+++ b/dlls/windowscodecs/metadatahandler.c
@@ -716,7 +716,7 @@ static int tag_to_vt(SHORT tag)
 static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
                               MetadataItem *item, BOOL native_byte_order)
 {
-    ULONG count, value, i, bytesread;
+    ULONG count, value, i;
     SHORT type;
     LARGE_INTEGER pos;
     HRESULT hr;
@@ -750,7 +750,7 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             {
                 item->value.vt |= VT_VECTOR;
                 item->value.caub.cElems = count;
-                item->value.caub.pElems = HeapAlloc(GetProcessHeap(), 0, count);
+                item->value.caub.pElems = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, count);
                 memcpy(item->value.caub.pElems, data, count);
             }
             break;
@@ -758,7 +758,7 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
 
         item->value.vt |= VT_VECTOR;
         item->value.caub.cElems = count;
-        item->value.caub.pElems = HeapAlloc(GetProcessHeap(), 0, count);
+        item->value.caub.pElems = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, count);
         if (!item->value.caub.pElems) return E_OUTOFMEMORY;
 
         pos.QuadPart = value;
@@ -768,9 +768,8 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             HeapFree(GetProcessHeap(), 0, item->value.caub.pElems);
             return hr;
         }
-        hr = IStream_Read(input, item->value.caub.pElems, count, &bytesread);
-        if (bytesread != count) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.caub.pElems, count, NULL);
+        if (FAILED(hr))
         {
             HeapFree(GetProcessHeap(), 0, item->value.caub.pElems);
             return hr;
@@ -793,7 +792,7 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             {
                 item->value.vt |= VT_VECTOR;
                 item->value.caui.cElems = count;
-                item->value.caui.pElems = HeapAlloc(GetProcessHeap(), 0, count * 2);
+                item->value.caui.pElems = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, count * 2);
                 memcpy(item->value.caui.pElems, data, count * 2);
                 for (i = 0; i < count; i++)
                     SWAP_USHORT(item->value.caui.pElems[i]);
@@ -803,7 +802,7 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
 
         item->value.vt |= VT_VECTOR;
         item->value.caui.cElems = count;
-        item->value.caui.pElems = HeapAlloc(GetProcessHeap(), 0, count * 2);
+        item->value.caui.pElems = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, count * 2);
         if (!item->value.caui.pElems) return E_OUTOFMEMORY;
 
         pos.QuadPart = value;
@@ -813,9 +812,8 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             HeapFree(GetProcessHeap(), 0, item->value.caui.pElems);
             return hr;
         }
-        hr = IStream_Read(input, item->value.caui.pElems, count * 2, &bytesread);
-        if (bytesread != count * 2) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.caui.pElems, count * 2, NULL);
+        if (FAILED(hr))
         {
             HeapFree(GetProcessHeap(), 0, item->value.caui.pElems);
             return hr;
@@ -836,7 +834,7 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
 
         item->value.vt |= VT_VECTOR;
         item->value.caul.cElems = count;
-        item->value.caul.pElems = HeapAlloc(GetProcessHeap(), 0, count * 4);
+        item->value.caul.pElems = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, count * 4);
         if (!item->value.caul.pElems) return E_OUTOFMEMORY;
 
         pos.QuadPart = value;
@@ -846,9 +844,8 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             HeapFree(GetProcessHeap(), 0, item->value.caul.pElems);
             return hr;
         }
-        hr = IStream_Read(input, item->value.caul.pElems, count * 4, &bytesread);
-        if (bytesread != count * 4) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.caul.pElems, count * 4, NULL);
+        if (FAILED(hr))
         {
             HeapFree(GetProcessHeap(), 0, item->value.caul.pElems);
             return hr;
@@ -874,8 +871,7 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             hr = IStream_Seek(input, pos, SEEK_SET, NULL);
             if (FAILED(hr)) return hr;
 
-            hr = IStream_Read(input, &ull, sizeof(ull), &bytesread);
-            if (bytesread != sizeof(ull)) hr = E_FAIL;
+            hr = IStream_Read(input, &ull, sizeof(ull), NULL);
             if (hr != S_OK) return hr;
 
             item->value.uhVal.QuadPart = ull;
@@ -893,7 +889,7 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
         {
             item->value.vt |= VT_VECTOR;
             item->value.cauh.cElems = count;
-            item->value.cauh.pElems = HeapAlloc(GetProcessHeap(), 0, count * 8);
+            item->value.cauh.pElems = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, count * 8);
             if (!item->value.cauh.pElems) return E_OUTOFMEMORY;
 
             pos.QuadPart = value;
@@ -903,9 +899,8 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
                 HeapFree(GetProcessHeap(), 0, item->value.cauh.pElems);
                 return hr;
             }
-            hr = IStream_Read(input, item->value.cauh.pElems, count * 8, &bytesread);
-            if (bytesread != count * 8) hr = E_FAIL;
-            if (hr != S_OK)
+            hr = IStream_Read(input, item->value.cauh.pElems, count * 8, NULL);
+            if (FAILED(hr))
             {
                 HeapFree(GetProcessHeap(), 0, item->value.cauh.pElems);
                 return hr;
@@ -923,7 +918,7 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
         }
         break;
     case IFD_ASCII:
-        item->value.pszVal = HeapAlloc(GetProcessHeap(), 0, count + 1);
+        item->value.pszVal = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, count + 1);
         if (!item->value.pszVal) return E_OUTOFMEMORY;
 
         if (count <= 4)
@@ -941,9 +936,8 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             HeapFree(GetProcessHeap(), 0, item->value.pszVal);
             return hr;
         }
-        hr = IStream_Read(input, item->value.pszVal, count, &bytesread);
-        if (bytesread != count) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.pszVal, count, NULL);
+        if (FAILED(hr))
         {
             HeapFree(GetProcessHeap(), 0, item->value.pszVal);
             return hr;
@@ -958,7 +952,7 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             break;
         }
 
-        item->value.blob.pBlobData = HeapAlloc(GetProcessHeap(), 0, count);
+        item->value.blob.pBlobData = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, count);
         if (!item->value.blob.pBlobData) return E_OUTOFMEMORY;
 
         item->value.blob.cbSize = count;
@@ -977,9 +971,8 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             HeapFree(GetProcessHeap(), 0, item->value.blob.pBlobData);
             return hr;
         }
-        hr = IStream_Read(input, item->value.blob.pBlobData, count, &bytesread);
-        if (bytesread != count) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.blob.pBlobData, count, NULL);
+        if (FAILED(hr))
         {
             HeapFree(GetProcessHeap(), 0, item->value.blob.pBlobData);
             return hr;
-- 
2.30.2

