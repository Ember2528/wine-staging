From e09f13e07463f2009f7705f0fe6f4a4c15b9876b Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Tue, 15 Sep 2020 19:44:38 +1000
Subject: [PATCH] ws2_32: Return a valid value for WSAIoctl
 SIO_IDEAL_SEND_BACKLOG_QUERY.

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/ntdll/unix/socket.c | 22 ++++++++++++++++++++++
 dlls/ws2_32/socket.c     | 17 +++++++++++++++++
 dlls/ws2_32/tests/sock.c | 13 ++++++++++++-
 include/wine/afd.h       |  1 +
 4 files changed, 52 insertions(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/socket.c b/dlls/ntdll/unix/socket.c
index 71dfcdd1114..cf52e53a236 100644
--- a/dlls/ntdll/unix/socket.c
+++ b/dlls/ntdll/unix/socket.c
@@ -1422,6 +1422,28 @@ NTSTATUS sock_ioctl( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, void *apc
             return STATUS_SUCCESS;
         }
 
+        case IOCTL_AFD_WINE_SEND_BACKLOG_QUERY:
+        {
+            if ((status = server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )))
+                return status;
+
+            if (out_size < sizeof(DWORD))
+            {
+                status = STATUS_BUFFER_TOO_SMALL;
+                break;
+            }
+
+            if(get_sock_type( handle ) != SOCK_STREAM)
+            {
+                status = STATUS_NOT_SUPPORTED;
+                break;
+            }
+
+            *(DWORD*)out_buffer = 0x10000; /* 64k */
+
+            break;
+        }
+
         case IOCTL_AFD_WINE_SIOCATMARK:
         {
             int value, ret;
diff --git a/dlls/ws2_32/socket.c b/dlls/ws2_32/socket.c
index fe7e4fb3464..9c133e94e60 100644
--- a/dlls/ws2_32/socket.c
+++ b/dlls/ws2_32/socket.c
@@ -2007,6 +2007,23 @@ INT WINAPI WSAIoctl(SOCKET s, DWORD code, LPVOID in_buff, DWORD in_size, LPVOID
         return ret ? -1 : 0;
     }
 
+    case SIO_IDEAL_SEND_BACKLOG_QUERY:
+    {
+        DWORD ret;
+
+        if (!out_buff)
+        {
+            SetLastError(WSAEFAULT);
+            return SOCKET_ERROR;
+        }
+
+        ret = server_ioctl_sock( s, IOCTL_AFD_WINE_SEND_BACKLOG_QUERY, in_buff, in_size,
+                                 out_buff, out_size, ret_size, overlapped, completion );
+        SetLastError( ret );
+        if (!ret) *ret_size = sizeof(u_long);
+        return ret ? -1 : 0;
+    }
+
     case SIOCATMARK:
     {
         DWORD ret;
diff --git a/dlls/ws2_32/tests/sock.c b/dlls/ws2_32/tests/sock.c
index 054e597b719..35102265cbf 100644
--- a/dlls/ws2_32/tests/sock.c
+++ b/dlls/ws2_32/tests/sock.c
@@ -6065,8 +6065,9 @@ static void test_WSASendTo(void)
     struct sockaddr_in addr, ret_addr;
     char buf[12] = "hello world";
     WSABUF data_buf;
-    DWORD bytesSent;
+    DWORD bytesSent, size;
     int ret, len;
+    ULONG backlog = 0;
 
     addr.sin_family = AF_INET;
     addr.sin_port = htons(139);
@@ -6102,6 +6103,11 @@ static void test_WSASendTo(void)
     ok(!ret, "got error %u\n", WSAGetLastError());
     ok(ret_addr.sin_family == AF_INET, "got family %u\n", ret_addr.sin_family);
     ok(ret_addr.sin_port, "expected nonzero port\n");
+
+    ret = WSAIoctl(s, SIO_IDEAL_SEND_BACKLOG_QUERY, NULL, 0, &backlog, sizeof(backlog), &size, NULL, NULL);
+    ok(ret == SOCKET_ERROR && WSAGetLastError() == WSAEOPNOTSUPP,
+       "WSAIoctl() failed: %d/%d\n", ret, WSAGetLastError());
+    closesocket(s);
 }
 
 static DWORD WINAPI recv_thread(LPVOID arg)
@@ -6142,6 +6148,7 @@ static void test_WSARecv(void)
     DWORD dwret;
     BOOL bret;
     HANDLE thread, event = NULL, io_port;
+    ULONG backlog = 0, size;
 
     tcp_socketpair(&src, &dest);
 
@@ -6290,6 +6297,10 @@ static void test_WSARecv(void)
 
     CloseHandle(io_port);
 
+    iret = WSAIoctl(src, SIO_IDEAL_SEND_BACKLOG_QUERY, NULL, 0, &backlog, sizeof(backlog), &size, NULL, NULL);
+    ok(!iret, "WSAIoctl() failed: %d/%d\n", iret, WSAGetLastError());
+    ok(backlog == 0x10000, "got %08x\n", backlog);
+
 end:
     if (server != INVALID_SOCKET)
         closesocket(server);
diff --git a/include/wine/afd.h b/include/wine/afd.h
index efd5787e90a..b6aad067770 100644
--- a/include/wine/afd.h
+++ b/include/wine/afd.h
@@ -283,6 +283,7 @@ C_ASSERT( sizeof(struct afd_get_events_params) == 56 );
 #define IOCTL_AFD_WINE_SET_IP_RECVTTL                   WINE_AFD_IOC(294)
 #define IOCTL_AFD_WINE_GET_IP_RECVTOS                   WINE_AFD_IOC(295)
 #define IOCTL_AFD_WINE_SET_IP_RECVTOS                   WINE_AFD_IOC(296)
+#define IOCTL_AFD_WINE_SEND_BACKLOG_QUERY               WINE_AFD_IOC(297)
 
 struct afd_iovec
 {
-- 
2.34.1

