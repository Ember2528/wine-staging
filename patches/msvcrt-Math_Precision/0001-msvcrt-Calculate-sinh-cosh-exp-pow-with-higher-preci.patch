From e4fa62af575322bf44df531caaaf92fe6b0e7329 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Fri, 10 Apr 2015 07:51:16 +0200
Subject: [PATCH] msvcrt: Calculate sinh/cosh/exp/pow with higher precision.
 (v2)

Based on a patch by Zheng Chen.
---
 dlls/msvcrt/math.c    |  2 ++
 dlls/msvcrt/unixlib.c | 61 ++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 60 insertions(+), 3 deletions(-)

diff --git a/dlls/msvcrt/unixlib.c b/dlls/msvcrt/unixlib.c
index edc3d96af4a..ec2a313b892 100644
--- a/dlls/msvcrt/unixlib.c
+++ b/dlls/msvcrt/unixlib.c
@@ -41,6 +41,61 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(msvcrt);
 
+#if defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))
+
+static inline double precise_cosh( double x )
+{
+    WORD precise_cw = 0x37f, pre_cw;
+    double z;
+    __asm__ __volatile__( "fnstcw %0" : "=m" (pre_cw) );
+    __asm__ __volatile__( "fldcw %0" : : "m" (precise_cw) );
+    z = cosh( x );
+    __asm__ __volatile__( "fldcw %0" : : "m" (pre_cw) );
+    return z;
+}
+
+static inline double precise_exp( double x )
+{
+    WORD precise_cw = 0x37f, pre_cw;
+    double z;
+    __asm__ __volatile__( "fnstcw %0" : "=m" (pre_cw) );
+    __asm__ __volatile__( "fldcw %0" : : "m" (precise_cw) );
+    z = exp( x );
+    __asm__ __volatile__( "fldcw %0" : : "m" (pre_cw) );
+    return z;
+}
+
+static inline double precise_pow( double x, double y )
+{
+    WORD precise_cw = 0x37f, pre_cw;
+    double z;
+    __asm__ __volatile__( "fnstcw %0" : "=m" (pre_cw) );
+    __asm__ __volatile__( "fldcw %0" : : "m" (precise_cw) );
+    z = pow( x, y );
+    __asm__ __volatile__( "fldcw %0" : : "m" (pre_cw) );
+    return z;
+}
+
+static inline double precise_sinh( double x )
+{
+    WORD precise_cw = 0x37f, pre_cw;
+    double z;
+    __asm__ __volatile__( "fnstcw %0" : "=m" (pre_cw) );
+    __asm__ __volatile__( "fldcw %0" : : "m" (precise_cw) );
+    z = sinh( x );
+    __asm__ __volatile__( "fldcw %0" : : "m" (pre_cw) );
+    return z;
+}
+
+#else
+
+#define precise_cosh cosh
+#define precise_exp  exp
+#define precise_pow  pow
+#define precise_sinh sinh
+
+#endif
+
 /*********************************************************************
  *      acosh
  */
@@ -165,7 +220,7 @@ static float CDECL unix_ceilf( float x )
  */
 static double CDECL unix_cos( double x )
 {
-    return cos( x );
+    return precise_cosh( x );
 }
 
 /*********************************************************************
@@ -253,7 +308,7 @@ static float CDECL unix_erfcf(float x)
  */
 static double CDECL unix_exp( double x )
 {
-    return exp( x );
+    return precise_exp( x );
 }
 
 /*********************************************************************
@@ -860,7 +915,7 @@ static float CDECL unix_sinf( float x )
  */
 static double CDECL unix_sinh( double x )
 {
-    return sinh( x );
+    return precise_sinh( x );
 }
 
 /*********************************************************************
-- 
2.29.2

