From d487c457d30e5ace5cf98cd76e4add11580dd159 Mon Sep 17 00:00:00 2001
From: Vijay Kiran Kamuju <infyquest@gmail.com>
Date: Mon, 17 Aug 2020 13:40:59 +0200
Subject: [PATCH 04/23] xactengine2_10: Implement IXACTEngine interface.

Signed-off-by: Vijay Kiran Kamuju <infyquest@gmail.com>
---
 configure                       |   1 +
 configure.ac                    |   1 +
 dlls/xactengine2_10/Makefile.in |   2 +
 dlls/xactengine2_10/xact2_dll.c | 479 ++++++++++++++++++++++++++++++++
 4 files changed, 483 insertions(+)

diff --git a/configure b/configure
index 3c58e678719..7c7d3b3ce16 100755
--- a/configure
+++ b/configure
@@ -16871,6 +16871,7 @@ then
     enable_x3daudio1_5=${enable_x3daudio1_5:-no}
     enable_x3daudio1_6=${enable_x3daudio1_6:-no}
     enable_x3daudio1_7=${enable_x3daudio1_7:-no}
+    enable_xactengine2_10=${enable_xactengine2_10:-no}
     enable_xactengine3_0=${enable_xactengine3_0:-no}
     enable_xactengine3_1=${enable_xactengine3_1:-no}
     enable_xactengine3_2=${enable_xactengine3_2:-no}
diff --git a/configure.ac b/configure.ac
index aa1d315da41..bcbeb230ed2 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1986,6 +1986,7 @@ then
     enable_x3daudio1_5=${enable_x3daudio1_5:-no}
     enable_x3daudio1_6=${enable_x3daudio1_6:-no}
     enable_x3daudio1_7=${enable_x3daudio1_7:-no}
+    enable_xactengine2_10=${enable_xactengine2_10:-no}
     enable_xactengine3_0=${enable_xactengine3_0:-no}
     enable_xactengine3_1=${enable_xactengine3_1:-no}
     enable_xactengine3_2=${enable_xactengine3_2:-no}
diff --git a/dlls/xactengine2_10/Makefile.in b/dlls/xactengine2_10/Makefile.in
index b1c131ddfd9..223b188d371 100644
--- a/dlls/xactengine2_10/Makefile.in
+++ b/dlls/xactengine2_10/Makefile.in
@@ -1,6 +1,8 @@
 MODULE    = xactengine2_10.dll
 IMPORTS   = ole32 uuid
 EXTRADEFS = -DXACT3_VER=0x0210
+EXTRALIBS = $(FAUDIO_LIBS)
+EXTRAINCL = $(FAUDIO_CFLAGS)
 
 C_SRCS = \
 	xact2_dll.c
diff --git a/dlls/xactengine2_10/xact2_dll.c b/dlls/xactengine2_10/xact2_dll.c
index 743f17c0691..08275a19f5c 100644
--- a/dlls/xactengine2_10/xact2_dll.c
+++ b/dlls/xactengine2_10/xact2_dll.c
@@ -18,6 +18,10 @@
 #include "config.h"
 
 #include <stdarg.h>
+#include <FACT.h>
+
+#define NONAMELESSUNION
+#define COBJMACROS
 
 #include "initguid.h"
 #include "xact.h"
@@ -28,6 +32,470 @@ WINE_DEFAULT_DEBUG_CHANNEL(xact3);
 
 static HINSTANCE instance;
 
+typedef struct _XACTEngineImpl {
+    IXACTEngine IXACTEngine_iface;
+
+    FACTAudioEngine *fact_engine;
+
+    XACT_READFILE_CALLBACK pReadFile;
+    XACT_GETOVERLAPPEDRESULT_CALLBACK pGetOverlappedResult;
+    XACT_NOTIFICATION_CALLBACK notification_callback;
+} XACTEngineImpl;
+
+typedef struct wrap_readfile_struct {
+    XACTEngineImpl *engine;
+    HANDLE file;
+} wrap_readfile_struct;
+
+static int32_t FACTCALL wrap_readfile(
+    void* hFile,
+    void* lpBuffer,
+    uint32_t nNumberOfBytesRead,
+    uint32_t *lpNumberOfBytesRead,
+    FACTOverlapped *lpOverlapped)
+{
+    wrap_readfile_struct *wrap = (wrap_readfile_struct*) hFile;
+    return wrap->engine->pReadFile(wrap->file, lpBuffer, nNumberOfBytesRead,
+            lpNumberOfBytesRead, (LPOVERLAPPED)lpOverlapped);
+}
+
+static int32_t FACTCALL wrap_getoverlappedresult(
+    void* hFile,
+    FACTOverlapped *lpOverlapped,
+    uint32_t *lpNumberOfBytesTransferred,
+    int32_t bWait)
+{
+    wrap_readfile_struct *wrap = (wrap_readfile_struct*) hFile;
+    return wrap->engine->pGetOverlappedResult(wrap->file, (LPOVERLAPPED)lpOverlapped,
+            lpNumberOfBytesTransferred, bWait);
+}
+
+static inline XACTEngineImpl *impl_from_IXACTEngine(IXACTEngine *iface)
+{
+    return CONTAINING_RECORD(iface, XACTEngineImpl, IXACTEngine_iface);
+}
+
+static HRESULT WINAPI IXACTEngineImpl_QueryInterface(IXACTEngine *iface,
+        REFIID riid, void **ppvObject)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)->(%s, %p)\n", This, debugstr_guid(riid), ppvObject);
+
+    if(IsEqualGUID(riid, &IID_IUnknown) ||
+             IsEqualGUID(riid, &IID_IXACTEngine)){
+        *ppvObject = &This->IXACTEngine_iface;
+    }
+    else
+        *ppvObject = NULL;
+
+    if (*ppvObject){
+        IUnknown_AddRef((IUnknown*)*ppvObject);
+        return S_OK;
+    }
+
+    FIXME("(%p)->(%s,%p), not found\n", This, debugstr_guid(riid), ppvObject);
+
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI IXACTEngineImpl_AddRef(IXACTEngine *iface)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+    ULONG ref = FACTAudioEngine_AddRef(This->fact_engine);
+    TRACE("(%p)->(): Refcount now %u\n", This, ref);
+    return ref;
+}
+
+static ULONG WINAPI IXACTEngineImpl_Release(IXACTEngine *iface)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+    ULONG ref = FACTAudioEngine_Release(This->fact_engine);
+
+    TRACE("(%p)->(): Refcount now %u\n", This, ref);
+
+    if (!ref)
+        HeapFree(GetProcessHeap(), 0, This);
+    return ref;
+}
+
+static HRESULT WINAPI IXACTEngineImpl_GetRendererCount(IXACTEngine *iface,
+        XACTINDEX *pnRendererCount)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)->(%p)\n", This, pnRendererCount);
+
+    return FACTAudioEngine_GetRendererCount(This->fact_engine, pnRendererCount);
+}
+
+static HRESULT WINAPI IXACTEngineImpl_GetRendererDetails(IXACTEngine *iface,
+        XACTINDEX nRendererIndex, XACT_RENDERER_DETAILS *pRendererDetails)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)->(%d, %p)\n", This, nRendererIndex, pRendererDetails);
+
+    return FACTAudioEngine_GetRendererDetails(This->fact_engine,
+            nRendererIndex, (FACTRendererDetails*) pRendererDetails);
+}
+
+static HRESULT WINAPI IXACTEngineImpl_GetFinalMixFormat(IXACTEngine *iface,
+        WAVEFORMATEXTENSIBLE *pFinalMixFormat)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)->(%p)\n", This, pFinalMixFormat);
+
+    return FACTAudioEngine_GetFinalMixFormat(This->fact_engine,
+            (FAudioWaveFormatExtensible*) pFinalMixFormat);
+}
+
+static void FACTCALL fact_notification_cb(const FACTNotification *notification)
+{
+    XACTEngineImpl *engine = (XACTEngineImpl *)notification->pvContext;
+
+    /* Older versions of FAudio don't pass through the context */
+    if (!engine)
+    {
+        WARN("Notification context is NULL\n");
+        return;
+    }
+
+    if (notification->type == XACTNOTIFICATIONTYPE_SOUNDBANKDESTROYED)
+    {
+        FIXME("Callback XACTNOTIFICATIONTYPE_SOUNDBANKDESTROYED\n");
+    }
+    else
+        FIXME("Unsupported callback type %d\n", notification->type);
+}
+
+static HRESULT WINAPI IXACTEngineImpl_Initialize(IXACTEngine *iface,
+        const XACT_RUNTIME_PARAMETERS *pParams)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+    FACTRuntimeParameters params;
+    UINT ret;
+
+    TRACE("(%p)->(%p)\n", This, pParams);
+
+    params.lookAheadTime = pParams->lookAheadTime;
+    params.pGlobalSettingsBuffer = pParams->pGlobalSettingsBuffer;
+    params.globalSettingsBufferSize = pParams->globalSettingsBufferSize;
+    params.globalSettingsFlags = pParams->globalSettingsFlags;
+    params.globalSettingsAllocAttributes = pParams->globalSettingsAllocAttributes;
+    params.pRendererID = pParams->pRendererID;
+    params.pXAudio2 = NULL;
+    params.pMasteringVoice = NULL;
+
+    /* Force Windows I/O, do NOT use the FACT default! */
+    This->pReadFile = (XACT_READFILE_CALLBACK)
+            pParams->fileIOCallbacks.readFileCallback;
+    This->pGetOverlappedResult = (XACT_GETOVERLAPPEDRESULT_CALLBACK)
+            pParams->fileIOCallbacks.getOverlappedResultCallback;
+    if (This->pReadFile == NULL)
+        This->pReadFile = (XACT_READFILE_CALLBACK) ReadFile;
+    if (This->pGetOverlappedResult == NULL)
+        This->pGetOverlappedResult = (XACT_GETOVERLAPPEDRESULT_CALLBACK)
+                GetOverlappedResult;
+    params.fileIOCallbacks.readFileCallback = wrap_readfile;
+    params.fileIOCallbacks.getOverlappedResultCallback = wrap_getoverlappedresult;
+    params.fnNotificationCallback = fact_notification_cb;
+
+    This->notification_callback = (XACT_NOTIFICATION_CALLBACK)pParams->fnNotificationCallback;
+
+    ret = FACTAudioEngine_Initialize(This->fact_engine, &params);
+    if (ret != 0)
+        WARN("FACTAudioEngine_Initialize returned %d\n", ret);
+
+    return !ret ? S_OK : E_FAIL;
+}
+
+static HRESULT WINAPI IXACTEngineImpl_ShutDown(IXACTEngine *iface)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)\n", This);
+
+    return FACTAudioEngine_ShutDown(This->fact_engine);
+}
+
+static HRESULT WINAPI IXACTEngineImpl_DoWork(IXACTEngine *iface)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)\n", This);
+
+    return FACTAudioEngine_DoWork(This->fact_engine);
+}
+
+static HRESULT WINAPI IXACTEngineImpl_CreateSoundBank(IXACTEngine *iface,
+        const void* pvBuffer, DWORD dwSize, DWORD dwFlags,
+        DWORD dwAllocAttributes, IXACTSoundBank **ppSoundBank)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+    FIXME("(%p)->(%p, %u, 0x%x, 0x%x, %p): stub!\n", This, pvBuffer, dwSize, dwFlags,
+            dwAllocAttributes, ppSoundBank);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI IXACTEngineImpl_CreateInMemoryWaveBank(IXACTEngine *iface,
+        const void* pvBuffer, DWORD dwSize, DWORD dwFlags,
+        DWORD dwAllocAttributes, IXACTWaveBank **ppWaveBank)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+    FIXME("(%p)->(%p, %u, 0x%x, 0x%x, %p): stub!\n", This, pvBuffer, dwSize, dwFlags,
+            dwAllocAttributes, ppWaveBank);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI IXACTEngineImpl_CreateStreamingWaveBank(IXACTEngine *iface,
+        const XACT_WAVEBANK_STREAMING_PARAMETERS *pParms,
+        IXACTWaveBank **ppWaveBank)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+    FIXME("(%p)->(%p, %p): stub!\n", This, pParms, ppWaveBank);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI IXACTEngineImpl_PrepareInMemoryWave(IXACTEngine *iface,
+        DWORD dwFlags, WAVEBANKENTRY entry, DWORD *pdwSeekTable,
+        BYTE *pbWaveData, DWORD dwPlayOffset, XACTLOOPCOUNT nLoopCount,
+        IXACTWave **ppWave)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+    FIXME("(%p): stub!\n", This);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI IXACTEngineImpl_PrepareStreamingWave(IXACTEngine *iface,
+        DWORD dwFlags, WAVEBANKENTRY entry,
+        XACT_STREAMING_PARAMETERS streamingParams, DWORD dwAlignment,
+        DWORD *pdwSeekTable, DWORD dwPlayOffset, XACTLOOPCOUNT nLoopCount,
+        IXACTWave **ppWave)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+    FIXME("(%p): stub!\n", This);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI IXACTEngineImpl_PrepareWave(IXACTEngine *iface,
+        DWORD dwFlags, PCSTR szWavePath, WORD wStreamingPacketSize,
+        DWORD dwAlignment, DWORD dwPlayOffset, XACTLOOPCOUNT nLoopCount,
+        IXACTWave **ppWave)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+    FIXME("(%p): stub!\n", This);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI IXACTEngineImpl_RegisterNotification(IXACTEngine *iface,
+        const XACT_NOTIFICATION_DESCRIPTION *pNotificationDesc)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+    FIXME("(%p)->(%p): stub!\n", This, pNotificationDesc);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI IXACTEngineImpl_UnRegisterNotification(IXACTEngine *iface,
+        const XACT_NOTIFICATION_DESCRIPTION *pNotificationDesc)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+    FIXME("(%p)->(%p): stub!\n", This, pNotificationDesc);
+    return E_NOTIMPL;
+}
+
+static XACTCATEGORY WINAPI IXACTEngineImpl_GetCategory(IXACTEngine *iface,
+        PCSTR szFriendlyName)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)->(%s)\n", This, szFriendlyName);
+
+    return FACTAudioEngine_GetCategory(This->fact_engine, szFriendlyName);
+}
+
+static HRESULT WINAPI IXACTEngineImpl_Stop(IXACTEngine *iface,
+        XACTCATEGORY nCategory, DWORD dwFlags)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)->(%u, 0x%x)\n", This, nCategory, dwFlags);
+
+    return FACTAudioEngine_Stop(This->fact_engine, nCategory, dwFlags);
+}
+
+static HRESULT WINAPI IXACTEngineImpl_SetVolume(IXACTEngine *iface,
+        XACTCATEGORY nCategory, XACTVOLUME nVolume)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)->(%u, %f)\n", This, nCategory, nVolume);
+
+    return FACTAudioEngine_SetVolume(This->fact_engine, nCategory, nVolume);
+}
+
+static HRESULT WINAPI IXACTEngineImpl_Pause(IXACTEngine *iface,
+        XACTCATEGORY nCategory, BOOL fPause)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)->(%u, %u)\n", This, nCategory, fPause);
+
+    return FACTAudioEngine_Pause(This->fact_engine, nCategory, fPause);
+}
+
+static XACTVARIABLEINDEX WINAPI IXACTEngineImpl_GetGlobalVariableIndex(
+        IXACTEngine *iface, PCSTR szFriendlyName)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)->(%s)\n", This, szFriendlyName);
+
+    return FACTAudioEngine_GetGlobalVariableIndex(This->fact_engine,
+            szFriendlyName);
+}
+
+static HRESULT WINAPI IXACTEngineImpl_SetGlobalVariable(IXACTEngine *iface,
+        XACTVARIABLEINDEX nIndex, XACTVARIABLEVALUE nValue)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)->(%u, %f)\n", This, nIndex, nValue);
+
+    return FACTAudioEngine_SetGlobalVariable(This->fact_engine, nIndex, nValue);
+}
+
+static HRESULT WINAPI IXACTEngineImpl_GetGlobalVariable(IXACTEngine *iface,
+        XACTVARIABLEINDEX nIndex, XACTVARIABLEVALUE *nValue)
+{
+    XACTEngineImpl *This = impl_from_IXACTEngine(iface);
+
+    TRACE("(%p)->(%u, %p)\n", This, nIndex, nValue);
+
+    return FACTAudioEngine_GetGlobalVariable(This->fact_engine, nIndex, nValue);
+}
+
+static const IXACTEngineVtbl XACTEngine_Vtbl =
+{
+    IXACTEngineImpl_QueryInterface,
+    IXACTEngineImpl_AddRef,
+    IXACTEngineImpl_Release,
+    IXACTEngineImpl_GetRendererCount,
+    IXACTEngineImpl_GetRendererDetails,
+    IXACTEngineImpl_GetFinalMixFormat,
+    IXACTEngineImpl_Initialize,
+    IXACTEngineImpl_ShutDown,
+    IXACTEngineImpl_DoWork,
+    IXACTEngineImpl_CreateSoundBank,
+    IXACTEngineImpl_CreateInMemoryWaveBank,
+    IXACTEngineImpl_CreateStreamingWaveBank,
+    IXACTEngineImpl_PrepareWave,
+    IXACTEngineImpl_PrepareInMemoryWave,
+    IXACTEngineImpl_PrepareStreamingWave,
+    IXACTEngineImpl_RegisterNotification,
+    IXACTEngineImpl_UnRegisterNotification,
+    IXACTEngineImpl_GetCategory,
+    IXACTEngineImpl_Stop,
+    IXACTEngineImpl_SetVolume,
+    IXACTEngineImpl_Pause,
+    IXACTEngineImpl_GetGlobalVariableIndex,
+    IXACTEngineImpl_SetGlobalVariable,
+    IXACTEngineImpl_GetGlobalVariable
+};
+
+void* XACT_Internal_Malloc(size_t size)
+{
+    return CoTaskMemAlloc(size);
+}
+
+void XACT_Internal_Free(void* ptr)
+{
+    return CoTaskMemFree(ptr);
+}
+
+void* XACT_Internal_Realloc(void* ptr, size_t size)
+{
+    return CoTaskMemRealloc(ptr, size);
+}
+
+static HRESULT WINAPI XACTCF_QueryInterface(IClassFactory *iface, REFIID riid, void **ppobj)
+{
+    if(IsEqualGUID(riid, &IID_IUnknown) ||
+       IsEqualGUID(riid, &IID_IClassFactory))
+    {
+        *ppobj = iface;
+        return S_OK;
+    }
+
+    *ppobj = NULL;
+    WARN("(%p)->(%s, %p): interface not found\n", iface, debugstr_guid(riid), ppobj);
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI XACTCF_AddRef(IClassFactory *iface)
+{
+    return 2;
+}
+
+static ULONG WINAPI XACTCF_Release(IClassFactory *iface)
+{
+    return 1;
+}
+
+static HRESULT WINAPI XACTCF_CreateInstance(IClassFactory *iface, IUnknown *pOuter,
+                                               REFIID riid, void **ppobj)
+{
+    HRESULT hr;
+    XACTEngineImpl *object;
+
+    TRACE("(%p)->(%p,%s,%p)\n", iface, pOuter, debugstr_guid(riid), ppobj);
+
+    *ppobj = NULL;
+
+    if(pOuter)
+        return CLASS_E_NOAGGREGATION;
+
+    object = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*object));
+    if(!object)
+        return E_OUTOFMEMORY;
+
+    object->IXACTEngine_iface.lpVtbl = &XACTEngine_Vtbl;
+
+    FACTCreateEngineWithCustomAllocatorEXT(
+        0,
+        &object->fact_engine,
+        XACT_Internal_Malloc,
+        XACT_Internal_Free,
+        XACT_Internal_Realloc
+    );
+
+    hr = IXACTEngine_QueryInterface(&object->IXACTEngine_iface, riid, ppobj);
+    if(FAILED(hr)){
+        HeapFree(GetProcessHeap(), 0, object);
+        return hr;
+    }
+
+    return hr;
+}
+
+static HRESULT WINAPI XACTCF_LockServer(IClassFactory *iface, BOOL dolock)
+{
+    TRACE("(%p)->(%d): stub!\n", iface, dolock);
+    return S_OK;
+}
+
+static const IClassFactoryVtbl XACTCF_Vtbl =
+{
+    XACTCF_QueryInterface,
+    XACTCF_AddRef,
+    XACTCF_Release,
+    XACTCF_CreateInstance,
+    XACTCF_LockServer
+};
+
+static IClassFactory XACTFactory = { &XACTCF_Vtbl };
+
 BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD reason, void *pReserved)
 {
     TRACE("(%p, %d, %p)\n", hinstDLL, reason, pReserved);
@@ -37,6 +505,11 @@ BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD reason, void *pReserved)
     case DLL_PROCESS_ATTACH:
         instance = hinstDLL;
         DisableThreadLibraryCalls( hinstDLL );
+
+#ifdef HAVE_FAUDIOLINKEDVERSION
+        TRACE("Using FAudio version %d\n", FAudioLinkedVersion() );
+#endif
+
         break;
     }
     return TRUE;
@@ -49,6 +522,12 @@ HRESULT WINAPI DllCanUnloadNow(void)
 
 HRESULT WINAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, void **ppv)
 {
+    if (IsEqualGUID(rclsid, &CLSID_XACTEngine))
+    {
+        TRACE("(%s, %s, %p)\n", debugstr_guid(rclsid), debugstr_guid(riid), ppv);
+        return IClassFactory_QueryInterface(&XACTFactory, riid, ppv);
+    }
+
     FIXME("Unknown class %s\n", debugstr_guid(rclsid));
     return CLASS_E_CLASSNOTAVAILABLE;
 }
-- 
2.28.0

