From 9e4292bb0ed2953f71ebe6c835db790d3cd5f954 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 12 Oct 2020 19:11:44 +0200
Subject: [PATCH 06/28] widl: Prefer mangled name over typedef in WinRT mode.

MIDL generates prefixed mangled name for every use of enum, struct and
union types, in fields types as well as function arguments. When the
types are in the global namespace, the typedef name is used instead.
---
 tools/widl/header.c   | 13 ++++++++++---
 tools/widl/typetree.c |  2 +-
 2 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/tools/widl/header.c b/tools/widl/header.c
index 607d156ccf4..d8dfcf4f4c3 100644
--- a/tools/widl/header.c
+++ b/tools/widl/header.c
@@ -250,7 +250,7 @@ static void write_fields(FILE *h, var_list_t *fields)
         default:
             ;
         }
-        write_type_v(h, &v->declspec, TRUE, v->declonly, name, NAME_DEFAULT);
+        write_type_v(h, &v->declspec, TRUE, v->declonly, name, NAME_C);
         fprintf(h, ";\n");
     }
 }
@@ -322,7 +322,7 @@ void write_type_left(FILE *h, const decl_spec_t *ds, enum name_type name_type, i
   if ((ds->qualifier & TYPE_QUALIFIER_CONST) && (type_is_alias(t) || !is_ptr(t)))
     fprintf(h, "const ");
 
-  if (type_is_alias(t)) fprintf(h, "%s", t->name);
+  if (!winrt_mode && type_is_alias(t)) fprintf(h, "%s", t->name);
   else {
     switch (type_get_type_detect_alias(t)) {
       case TYPE_ENUM:
@@ -464,6 +464,13 @@ void write_type_left(FILE *h, const decl_spec_t *ds, enum name_type name_type, i
         break;
       }
       case TYPE_ALIAS:
+      {
+        const decl_spec_t *ds = type_alias_get_aliasee(t);
+        int in_namespace = ds && ds->type && ds->type->namespace && !is_global_namespace(ds->type->namespace);
+        if (!in_namespace) fprintf(h, "%s", t->name);
+        else write_type_left(h, ds, name_type, declonly, write_callconv);
+        break;
+      }
       case TYPE_APICONTRACT:
         /* handled elsewhere */
         assert(0);
@@ -807,7 +814,7 @@ static void write_generic_handle_routines(FILE *header)
 static void write_typedef(FILE *header, type_t *type, int declonly)
 {
   fprintf(header, "typedef ");
-  write_type_v(header, type_alias_get_aliasee(type), FALSE, declonly, type->name, NAME_DEFAULT);
+  write_type_v(header, type_alias_get_aliasee(type), FALSE, declonly, type->name, NAME_C);
   fprintf(header, ";\n");
 }
 
diff --git a/tools/widl/typetree.c b/tools/widl/typetree.c
index ebba2c4c6bb..d8dcd5d80b0 100644
--- a/tools/widl/typetree.c
+++ b/tools/widl/typetree.c
@@ -82,7 +82,7 @@ const char *type_get_name(const type_t *type, enum name_type name_type)
     case NAME_DEFAULT:
         return type->name;
     case NAME_C:
-        return type->c_name;
+        return type->c_name ? type->c_name : type->name;
     }
 
     assert(0);
-- 
2.28.0

