From c0c0bfcf80077cd2b5db3f7c1fb3fa597ae57321 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 13 Oct 2020 11:35:29 +0200
Subject: [PATCH 19/28] widl: Support WinRT activatable attribute.

---
 tools/widl/header.c    | 11 +++++++++++
 tools/widl/parser.l    |  1 +
 tools/widl/parser.y    |  3 +++
 tools/widl/widltypes.h |  1 +
 4 files changed, 16 insertions(+)

diff --git a/tools/widl/header.c b/tools/widl/header.c
index 5dfc5e2ff8c..5c87a997349 100644
--- a/tools/widl/header.c
+++ b/tools/widl/header.c
@@ -1505,6 +1505,7 @@ static char *format_apicontract_macro(const type_t *type)
 static void write_winrt_type_comments(FILE *header, const type_t *type)
 {
     expr_t *contract = get_attrp(type->attrs, ATTR_CONTRACT);
+    expr_t *activatable = get_attrp(type->attrs, ATTR_ACTIVATABLE);
     type_t *exclusiveto = get_attrp(type->attrs, ATTR_EXCLUSIVETO);
     type_list_t *requires = type->type_type == TYPE_INTERFACE ? type_iface_get_requires(type) : NULL;
     expr_list_t statics = LIST_INIT(statics);
@@ -1518,6 +1519,16 @@ static void write_winrt_type_comments(FILE *header, const type_t *type)
         fprintf(header, " * Introduced to %s in version %d.%d\n *\n", name, (ver >> 16) & 0xffff, ver & 0xffff);
         free(name);
     }
+    if (activatable)
+    {
+        const type_t *apicontract = activatable->u.tref.type;
+        int version_req = activatable->ref->u.lval;
+        char *name = format_namespace(apicontract->namespace, "", ".", apicontract->name, NULL);
+        fprintf(header, " * RuntimeClass can be activated.\n");
+        fprintf(header, " *   Type can be activated via RoActivateInstance starting with version %d.%d of the %s API contract\n *\n",
+                (version_req >> 16) & 0xffff, version_req & 0xffff, name);
+        free(name);
+    }
     if (exclusiveto)
     {
         char *name = format_namespace(exclusiveto->namespace, "", ".", exclusiveto->name, NULL);
diff --git a/tools/widl/parser.l b/tools/widl/parser.l
index 2b41bea1bc9..a47c490ec4c 100644
--- a/tools/widl/parser.l
+++ b/tools/widl/parser.l
@@ -321,6 +321,7 @@ static const struct keyword keywords[] = {
  */
 static const struct keyword attr_keywords[] =
 {
+	{"activatable",                 tACTIVATABLE,               1},
 	{"aggregatable",                tAGGREGATABLE,              0},
 	{"agile",                       tAGILE,                     1},
 	{"allocate",                    tALLOCATE,                  0},
diff --git a/tools/widl/parser.y b/tools/widl/parser.y
index 1da667e0ced..d24f8881147 100644
--- a/tools/widl/parser.y
+++ b/tools/widl/parser.y
@@ -172,6 +172,7 @@ static typelib_t *current_typelib;
 %token GREATEREQUAL LESSEQUAL
 %token LOGICALOR LOGICALAND
 %token ELLIPSIS
+%token tACTIVATABLE
 %token tAGGREGATABLE
 %token tAGILE
 %token tALLOCATE tANNOTATION
@@ -544,6 +545,7 @@ static_attr: decl_spec ',' contract_req		{ if ($1->type->type_type != TYPE_INTER
 						}
 
 attribute:					{ $$ = NULL; }
+	| tACTIVATABLE '(' contract_req ')'	{ $$ = make_attrp(ATTR_ACTIVATABLE, $3); }
 	| tAGGREGATABLE				{ $$ = make_attr(ATTR_AGGREGATABLE); }
 	| tANNOTATION '(' aSTRING ')'		{ $$ = make_attrp(ATTR_ANNOTATION, $3); }
 	| tAPPOBJECT				{ $$ = make_attr(ATTR_APPOBJECT); }
@@ -2239,6 +2241,7 @@ struct allowed_attr
 struct allowed_attr allowed_attr[] =
 {
     /* attr                        { D ACF M   I Fn ARG T En Enm St Un Fi L  DI M  C AC  R  <display name> } */
+    /* ATTR_ACTIVATABLE */         { 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, "activatable" },
     /* ATTR_AGGREGATABLE */        { 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, "aggregatable" },
     /* ATTR_ANNOTATION */          { 0, 0, 0,  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "annotation" },
     /* ATTR_APPOBJECT */           { 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, "appobject" },
diff --git a/tools/widl/widltypes.h b/tools/widl/widltypes.h
index be71886260b..7ca770b67ea 100644
--- a/tools/widl/widltypes.h
+++ b/tools/widl/widltypes.h
@@ -68,6 +68,7 @@ typedef struct list warning_list_t;
 
 enum attr_type
 {
+    ATTR_ACTIVATABLE,
     ATTR_AGGREGATABLE,
     ATTR_ANNOTATION,
     ATTR_APPOBJECT,
-- 
2.28.0

