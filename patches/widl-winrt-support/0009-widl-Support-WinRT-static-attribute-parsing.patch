From d8ed7fe746a0ae8506683ea7aeadfb33ac6e0fa3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 13 Oct 2020 14:30:32 +0200
Subject: [PATCH] widl: Support WinRT static attribute parsing.

---
 tools/widl/header.c    | 30 ++++++++++++++++++++++++++++++
 tools/widl/parser.l    |  1 +
 tools/widl/parser.y    |  8 ++++++++
 tools/widl/widltypes.h |  1 +
 4 files changed, 40 insertions(+)

diff --git a/tools/widl/header.c b/tools/widl/header.c
index ae392fe7de4..cb8231f213d 100644
--- a/tools/widl/header.c
+++ b/tools/widl/header.c
@@ -109,6 +109,17 @@ int is_attr(const attr_list_t *list, enum attr_type t)
     return 0;
 }
 
+static void get_attr_statics(const attr_list_t *attrs, expr_list_t *list)
+{
+    const attr_t *attr;
+    if (!attrs) return;
+    LIST_FOR_EACH_ENTRY( attr, attrs, const attr_t, entry )
+    {
+        if (attr->type != ATTR_STATIC) continue;
+        list_add_tail(list, &((expr_t *)attr->u.pval)->entry);
+    }
+}
+
 void *get_attrp(const attr_list_t *list, enum attr_type t)
 {
     const attr_t *attr;
@@ -1495,6 +1506,8 @@ static void write_winrt_type_comments(FILE *header, const type_t *type)
 {
     expr_t *contract = get_attrp(type->attrs, ATTR_CONTRACT);
     type_t *exclusiveto = get_attrp(type->attrs, ATTR_EXCLUSIVETO);
+    expr_list_t statics = LIST_INIT(statics);
+    get_attr_statics(type->attrs, &statics);
     fprintf(header, " *\n");
     if (contract)
     {
@@ -1510,6 +1523,23 @@ static void write_winrt_type_comments(FILE *header, const type_t *type)
         fprintf(header, " * Interface is a part of the implementation of type %s\n *\n", name);
         free(name);
     }
+    if (!list_empty(&statics))
+    {
+        expr_t *expr;
+        fprintf(header, " * RuntimeClass contains static methods.\n");
+        LIST_FOR_EACH_ENTRY(expr, &statics, expr_t, entry)
+        {
+            const type_t *iface = expr->u.tref.type, *apicontract = expr->ref->u.tref.type;
+            int version_req = expr->ref->ref->u.lval;
+            char *iface_name = format_namespace(iface->namespace, "", ".", iface->name, NULL);
+            char *name = format_namespace(apicontract->namespace, "", ".", apicontract->name, NULL);
+            fprintf(header, " *   Static Methods exist on the %s interface starting with version %d.%d of the %s API contract\n",
+                    iface_name, (version_req >> 16) & 0xffff, version_req & 0xffff, name);
+            free(iface_name);
+            free(name);
+        }
+        fprintf(header, " *\n");
+    }
     if (type_get_type(type) == TYPE_RUNTIMECLASS)
     {
         ifref_list_t *ifaces = type_runtimeclass_get_ifaces(type);
diff --git a/tools/widl/parser.l b/tools/widl/parser.l
index 51142ded6e6..2695e8cf622 100644
--- a/tools/widl/parser.l
+++ b/tools/widl/parser.l
@@ -426,6 +426,7 @@ static const struct keyword attr_keywords[] =
 	{"size_is",                     tSIZEIS,                    0},
 	{"source",                      tSOURCE,                    0},
 	{"standard",                    tSTANDARD,                  1},
+	{"static",                      tSTATIC,                    1},
 	{"strict_context_handle",       tSTRICTCONTEXTHANDLE,       0},
 	{"string",                      tSTRING,                    0},
 	{"switch_is",                   tSWITCHIS,                  0},
diff --git a/tools/widl/parser.y b/tools/widl/parser.y
index 6f1a7a68e9c..908e7b6d4da 100644
--- a/tools/widl/parser.y
+++ b/tools/widl/parser.y
@@ -285,6 +285,7 @@ static typelib_t *current_typelib;
 %type <expr> m_expr expr expr_const expr_int_const array m_bitfield
 %type <expr_list> m_exprs /* exprs expr_list */ expr_list_int_const
 %type <expr> contract_req
+%type <expr> static_attr
 %type <type> interfacehdr
 %type <stgclass> storage_cls_spec
 %type <type_qualifier> type_qualifier m_type_qual_list
@@ -541,6 +542,11 @@ contract_req: decl_spec ',' contract_ver	{ if ($1->type->type_type != TYPE_APICO
 						  $$ = make_exprt(EXPR_GTREQL, declare_var(NULL, $1, make_declarator(NULL), 0), $$);
 						}
 
+static_attr: decl_spec ',' contract_req		{ if ($1->type->type_type != TYPE_INTERFACE)
+						      error_loc("type %s is not an interface\n", $1->type->name);
+						  $$ = make_exprt(EXPR_MEMBER, declare_var(NULL, $1, make_declarator(NULL), 0), $3);
+						}
+
 attribute:					{ $$ = NULL; }
 	| tAGGREGATABLE				{ $$ = make_attr(ATTR_AGGREGATABLE); }
 	| tANNOTATION '(' aSTRING ')'		{ $$ = make_attrp(ATTR_ANNOTATION, $3); }
@@ -638,6 +644,7 @@ attribute:					{ $$ = NULL; }
 	| tRETVAL				{ $$ = make_attr(ATTR_RETVAL); }
 	| tSIZEIS '(' m_exprs ')'		{ $$ = make_attrp(ATTR_SIZEIS, $3); }
 	| tSOURCE				{ $$ = make_attr(ATTR_SOURCE); }
+	| tSTATIC '(' static_attr ')'		{ $$ = make_attrp(ATTR_STATIC, $3); }
 	| tSTRICTCONTEXTHANDLE                  { $$ = make_attr(ATTR_STRICTCONTEXTHANDLE); }
 	| tSTRING				{ $$ = make_attr(ATTR_STRING); }
 	| tSWITCHIS '(' expr ')'		{ $$ = make_attrp(ATTR_SWITCHIS, $3); }
@@ -2336,6 +2343,7 @@ struct allowed_attr allowed_attr[] =
     /* ATTR_RETVAL */              { 0, 0, 0,  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "retval" },
     /* ATTR_SIZEIS */              { 0, 0, 0,  0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "size_is" },
     /* ATTR_SOURCE */              { 0, 0, 0,  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, "source" },
+    /* ATTR_STATIC */              { 0, 0, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, "static" },
     /* ATTR_STRICTCONTEXTHANDLE */ { 0, 0, 0,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "strict_context_handle" },
     /* ATTR_STRING */              { 1, 0, 0,  0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "string" },
     /* ATTR_SWITCHIS */            { 1, 0, 0,  0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "switch_is" },
diff --git a/tools/widl/widltypes.h b/tools/widl/widltypes.h
index a3283761256..0e001f20cfb 100644
--- a/tools/widl/widltypes.h
+++ b/tools/widl/widltypes.h
@@ -162,6 +162,7 @@ enum attr_type
     ATTR_RETVAL,
     ATTR_SIZEIS,
     ATTR_SOURCE,
+    ATTR_STATIC,
     ATTR_STRICTCONTEXTHANDLE,
     ATTR_STRING,
     ATTR_SWITCHIS,
-- 
2.29.2

