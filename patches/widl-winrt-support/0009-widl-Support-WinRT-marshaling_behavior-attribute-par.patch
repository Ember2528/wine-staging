From 8ae37dd05502ae83af4f0284181eabae88aad9ee Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 12 Oct 2020 20:34:28 +0200
Subject: [PATCH] widl: Support WinRT marshaling_behavior attribute parsing.

---
 tools/widl/header.c    |  7 +++++++
 tools/widl/parser.l    |  4 ++++
 tools/widl/parser.y    | 19 +++++++++++++++++--
 tools/widl/widltypes.h |  9 +++++++++
 4 files changed, 37 insertions(+), 2 deletions(-)

diff --git a/tools/widl/header.c b/tools/widl/header.c
index e1c48ae35ea..9185477964e 100644
--- a/tools/widl/header.c
+++ b/tools/widl/header.c
@@ -1478,6 +1478,13 @@ static void write_winrt_type_comments(FILE *header, const type_t *type)
         fprintf(header, " * Introduced to %s in version %d.%d\n *\n", name, (ver >> 16) & 0xffff, ver & 0xffff);
         free(name);
     }
+    switch (get_attrv(type->attrs, ATTR_MARSHALING_BEHAVIOR))
+    {
+        case MARSHALING_AGILE: fprintf(header, " * Class Marshaling Behavior:  Agile - Class is agile\n *\n"); break;
+        case MARSHALING_STANDARD: fprintf(header, " * Class Marshaling Behavior:  Standard - Class marshals using the standard marshaler\n *\n"); break;
+        case MARSHALING_NONE: fprintf(header, " * Class Marshaling Behavior:  None - Class cannot be marshaled\n *\n"); break;
+        default: break;
+    }
 }
 
 static void write_apicontract_guard_start(FILE *header, const expr_t *expr)
diff --git a/tools/widl/parser.l b/tools/widl/parser.l
index c689b1cd400..92f7c7844f3 100644
--- a/tools/widl/parser.l
+++ b/tools/widl/parser.l
@@ -319,6 +319,7 @@ static const struct keyword keywords[] = {
 static const struct keyword attr_keywords[] =
 {
 	{"aggregatable",                tAGGREGATABLE,              0},
+	{"agile",                       tAGILE,                     1},
 	{"all_nodes",                   tALLNODES,                  0},
 	{"allocate",                    tALLOCATE,                  0},
 	{"annotation",                  tANNOTATION,                0},
@@ -378,12 +379,14 @@ static const struct keyword attr_keywords[] =
 	{"length_is",                   tLENGTHIS,                  0},
 	{"licensed",                    tLICENSED,                  0},
 	{"local",                       tLOCAL,                     0},
+	{"marshaling_behavior",         tMARSHALINGBEHAVIOR,        1},
 	{"maybe",                       tMAYBE,                     0},
 	{"message",                     tMESSAGE,                   0},
 	{"neutral",                     tNEUTRAL,                   0},
 	{"nocode",                      tNOCODE,                    0},
 	{"nonbrowsable",                tNONBROWSABLE,              0},
 	{"noncreatable",                tNONCREATABLE,              0},
+	{"none",                        tNONE,                      1},
 	{"nonextensible",               tNONEXTENSIBLE,             0},
 	{"notify",                      tNOTIFY,                    0},
 	{"notify_flag",                 tNOTIFYFLAG,                0},
@@ -413,6 +416,7 @@ static const struct keyword attr_keywords[] =
 	{"single_node",                 tSINGLENODE,                0},
 	{"size_is",                     tSIZEIS,                    0},
 	{"source",                      tSOURCE,                    0},
+	{"standard",                    tSTANDARD,                  1},
 	{"strict_context_handle",       tSTRICTCONTEXTHANDLE,       0},
 	{"string",                      tSTRING,                    0},
 	{"switch_is",                   tSWITCHIS,                  0},
diff --git a/tools/widl/parser.y b/tools/widl/parser.y
index b6c24741f21..f3f71e9838a 100644
--- a/tools/widl/parser.y
+++ b/tools/widl/parser.y
@@ -172,7 +172,10 @@ static typelib_t *current_typelib;
 %token GREATEREQUAL LESSEQUAL
 %token LOGICALOR LOGICALAND
 %token ELLIPSIS
-%token tAGGREGATABLE tALLNODES tALLOCATE tANNOTATION tAPPOBJECT tASYNC tASYNCUUID
+%token tAGGREGATABLE tALLNODES tAPPOBJECT tASYNC tASYNCUUID
+%token tAGGREGATABLE tALLNODES
+%token tAGILE
+%token tALLOCATE tANNOTATION
 %token tAUTOHANDLE tBINDABLE tBOOLEAN tBROADCAST tBYTE tBYTECOUNT
 %token tCALLAS tCALLBACK tCASE tCDECL tCHAR tCOCLASS tCODE tCOMMSTATUS
 %token tCONST tCONTEXTHANDLE tCONTEXTHANDLENOSERIALIZE
@@ -208,12 +211,14 @@ static typelib_t *current_typelib;
 %token tLENGTHIS tLIBRARY
 %token tLICENSED tLOCAL
 %token tLONG
+%token tMARSHALINGBEHAVIOR
 %token tMAYBE tMESSAGE
 %token tMETHODS
 %token tMODULE
 %token tNAMESPACE
 %token tNOCODE tNONBROWSABLE
 %token tNONCREATABLE
+%token tNONE
 %token tNONEXTENSIBLE
 %token tNOTIFY tNOTIFYFLAG
 %token tNULL
@@ -239,6 +244,7 @@ static typelib_t *current_typelib;
 %token tSIZEIS tSIZEOF
 %token tSMALL
 %token tSOURCE
+%token tSTANDARD
 %token tSTATIC
 %token tSTDCALL
 %token tSTRICTCONTEXTHANDLE
@@ -289,7 +295,7 @@ static typelib_t *current_typelib;
 %type <declarator> m_abstract_declarator abstract_declarator abstract_declarator_no_direct abstract_direct_declarator
 %type <declarator_list> declarator_list struct_declarator_list
 %type <type> coclass coclasshdr coclassdef
-%type <num> pointer_type threading_type version
+%type <num> pointer_type threading_type marshaling_behavior version
 %type <str> libraryhdr callconv cppquote importlib import t_ident
 %type <uuid> uuid_string
 %type <import> import_start
@@ -491,6 +497,12 @@ str_list: aSTRING                               { $$ = append_str( NULL, $1 ); }
 	| str_list ',' aSTRING                  { $$ = append_str( $1, $3 ); }
 	;
 
+marshaling_behavior:
+	  tAGILE				{ $$ = MARSHALING_AGILE; }
+	| tNONE					{ $$ = MARSHALING_NONE; }
+	| tSTANDARD				{ $$ = MARSHALING_STANDARD; }
+	;
+
 contract_req: decl_spec ',' contract_ver	{ if ($1->type->type_type != TYPE_APICONTRACT)
 						      error_loc("type %s is not an apicontract\n", $1->type->name);
 						  $$ = make_exprl(EXPR_NUM, $3);
@@ -551,6 +563,8 @@ attribute:					{ $$ = NULL; }
 	| tLCID					{ $$ = make_attr(ATTR_PARAMLCID); }
 	| tLICENSED				{ $$ = make_attr(ATTR_LICENSED); }
 	| tLOCAL				{ $$ = make_attr(ATTR_LOCAL); }
+	| tMARSHALINGBEHAVIOR '(' marshaling_behavior ')'
+						{ $$ = make_attrv(ATTR_MARSHALING_BEHAVIOR, $3); }
 	| tMAYBE				{ $$ = make_attr(ATTR_MAYBE); }
 	| tMESSAGE				{ $$ = make_attr(ATTR_MESSAGE); }
 	| tNOCODE				{ $$ = make_attr(ATTR_NOCODE); }
@@ -2188,6 +2202,7 @@ struct allowed_attr allowed_attr[] =
     /* ATTR_LIBLCID */             { 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, "lcid" },
     /* ATTR_LICENSED */            { 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, "licensed" },
     /* ATTR_LOCAL */               { 1, 0, 0,  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "local" },
+    /* ATTR_MARSHALING_BEHAVIOR */ { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "marshaling_behavior" },
     /* ATTR_MAYBE */               { 0, 0, 0,  0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "maybe" },
     /* ATTR_MESSAGE */             { 0, 0, 0,  0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "message" },
     /* ATTR_NOCODE */              { 0, 1, 0,  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "nocode" },
diff --git a/tools/widl/widltypes.h b/tools/widl/widltypes.h
index 5e93dc1275f..c32b029e4a8 100644
--- a/tools/widl/widltypes.h
+++ b/tools/widl/widltypes.h
@@ -122,6 +122,7 @@ enum attr_type
     ATTR_LIBLCID,
     ATTR_LICENSED,
     ATTR_LOCAL,
+    ATTR_MARSHALING_BEHAVIOR,
     ATTR_MAYBE,
     ATTR_MESSAGE,
     ATTR_NOCODE,
@@ -268,6 +269,14 @@ enum threading_type
     THREADING_BOTH
 };
 
+enum marshaling_type
+{
+    MARSHALING_INVALID = 0,
+    MARSHALING_NONE,
+    MARSHALING_AGILE,
+    MARSHALING_STANDARD,
+};
+
 enum type_basic_type
 {
     TYPE_BASIC_INT8 = 1,
-- 
2.29.2

